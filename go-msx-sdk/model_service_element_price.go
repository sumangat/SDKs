/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// ServiceElementPrice struct for ServiceElementPrice
type ServiceElementPrice struct {
	OneTimePrice *string `json:"oneTimePrice,omitempty"`
	PeriodicPrice *string `json:"periodicPrice,omitempty"`
	TimePeriod *string `json:"timePeriod,omitempty"`
	UnitOfMeasure *string `json:"unitOfMeasure,omitempty"`
	IncludedQuantity *int32 `json:"includedQuantity,omitempty"`
	AdditionalOneTimePrice *string `json:"additionalOneTimePrice,omitempty"`
	AdditionalPeriodicPrice *string `json:"additionalPeriodicPrice,omitempty"`
	AdditionalQuantity *int32 `json:"additionalQuantity,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServiceElementPrice ServiceElementPrice

// NewServiceElementPrice instantiates a new ServiceElementPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceElementPrice() *ServiceElementPrice {
	this := ServiceElementPrice{}
	return &this
}

// NewServiceElementPriceWithDefaults instantiates a new ServiceElementPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceElementPriceWithDefaults() *ServiceElementPrice {
	this := ServiceElementPrice{}
	return &this
}

// GetOneTimePrice returns the OneTimePrice field value if set, zero value otherwise.
func (o *ServiceElementPrice) GetOneTimePrice() string {
	if o == nil || o.OneTimePrice == nil {
		var ret string
		return ret
	}
	return *o.OneTimePrice
}

// GetOneTimePriceOk returns a tuple with the OneTimePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceElementPrice) GetOneTimePriceOk() (*string, bool) {
	if o == nil || o.OneTimePrice == nil {
		return nil, false
	}
	return o.OneTimePrice, true
}

// HasOneTimePrice returns a boolean if a field has been set.
func (o *ServiceElementPrice) HasOneTimePrice() bool {
	if o != nil && o.OneTimePrice != nil {
		return true
	}

	return false
}

// SetOneTimePrice gets a reference to the given string and assigns it to the OneTimePrice field.
func (o *ServiceElementPrice) SetOneTimePrice(v string) {
	o.OneTimePrice = &v
}

// GetPeriodicPrice returns the PeriodicPrice field value if set, zero value otherwise.
func (o *ServiceElementPrice) GetPeriodicPrice() string {
	if o == nil || o.PeriodicPrice == nil {
		var ret string
		return ret
	}
	return *o.PeriodicPrice
}

// GetPeriodicPriceOk returns a tuple with the PeriodicPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceElementPrice) GetPeriodicPriceOk() (*string, bool) {
	if o == nil || o.PeriodicPrice == nil {
		return nil, false
	}
	return o.PeriodicPrice, true
}

// HasPeriodicPrice returns a boolean if a field has been set.
func (o *ServiceElementPrice) HasPeriodicPrice() bool {
	if o != nil && o.PeriodicPrice != nil {
		return true
	}

	return false
}

// SetPeriodicPrice gets a reference to the given string and assigns it to the PeriodicPrice field.
func (o *ServiceElementPrice) SetPeriodicPrice(v string) {
	o.PeriodicPrice = &v
}

// GetTimePeriod returns the TimePeriod field value if set, zero value otherwise.
func (o *ServiceElementPrice) GetTimePeriod() string {
	if o == nil || o.TimePeriod == nil {
		var ret string
		return ret
	}
	return *o.TimePeriod
}

// GetTimePeriodOk returns a tuple with the TimePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceElementPrice) GetTimePeriodOk() (*string, bool) {
	if o == nil || o.TimePeriod == nil {
		return nil, false
	}
	return o.TimePeriod, true
}

// HasTimePeriod returns a boolean if a field has been set.
func (o *ServiceElementPrice) HasTimePeriod() bool {
	if o != nil && o.TimePeriod != nil {
		return true
	}

	return false
}

// SetTimePeriod gets a reference to the given string and assigns it to the TimePeriod field.
func (o *ServiceElementPrice) SetTimePeriod(v string) {
	o.TimePeriod = &v
}

// GetUnitOfMeasure returns the UnitOfMeasure field value if set, zero value otherwise.
func (o *ServiceElementPrice) GetUnitOfMeasure() string {
	if o == nil || o.UnitOfMeasure == nil {
		var ret string
		return ret
	}
	return *o.UnitOfMeasure
}

// GetUnitOfMeasureOk returns a tuple with the UnitOfMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceElementPrice) GetUnitOfMeasureOk() (*string, bool) {
	if o == nil || o.UnitOfMeasure == nil {
		return nil, false
	}
	return o.UnitOfMeasure, true
}

// HasUnitOfMeasure returns a boolean if a field has been set.
func (o *ServiceElementPrice) HasUnitOfMeasure() bool {
	if o != nil && o.UnitOfMeasure != nil {
		return true
	}

	return false
}

// SetUnitOfMeasure gets a reference to the given string and assigns it to the UnitOfMeasure field.
func (o *ServiceElementPrice) SetUnitOfMeasure(v string) {
	o.UnitOfMeasure = &v
}

// GetIncludedQuantity returns the IncludedQuantity field value if set, zero value otherwise.
func (o *ServiceElementPrice) GetIncludedQuantity() int32 {
	if o == nil || o.IncludedQuantity == nil {
		var ret int32
		return ret
	}
	return *o.IncludedQuantity
}

// GetIncludedQuantityOk returns a tuple with the IncludedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceElementPrice) GetIncludedQuantityOk() (*int32, bool) {
	if o == nil || o.IncludedQuantity == nil {
		return nil, false
	}
	return o.IncludedQuantity, true
}

// HasIncludedQuantity returns a boolean if a field has been set.
func (o *ServiceElementPrice) HasIncludedQuantity() bool {
	if o != nil && o.IncludedQuantity != nil {
		return true
	}

	return false
}

// SetIncludedQuantity gets a reference to the given int32 and assigns it to the IncludedQuantity field.
func (o *ServiceElementPrice) SetIncludedQuantity(v int32) {
	o.IncludedQuantity = &v
}

// GetAdditionalOneTimePrice returns the AdditionalOneTimePrice field value if set, zero value otherwise.
func (o *ServiceElementPrice) GetAdditionalOneTimePrice() string {
	if o == nil || o.AdditionalOneTimePrice == nil {
		var ret string
		return ret
	}
	return *o.AdditionalOneTimePrice
}

// GetAdditionalOneTimePriceOk returns a tuple with the AdditionalOneTimePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceElementPrice) GetAdditionalOneTimePriceOk() (*string, bool) {
	if o == nil || o.AdditionalOneTimePrice == nil {
		return nil, false
	}
	return o.AdditionalOneTimePrice, true
}

// HasAdditionalOneTimePrice returns a boolean if a field has been set.
func (o *ServiceElementPrice) HasAdditionalOneTimePrice() bool {
	if o != nil && o.AdditionalOneTimePrice != nil {
		return true
	}

	return false
}

// SetAdditionalOneTimePrice gets a reference to the given string and assigns it to the AdditionalOneTimePrice field.
func (o *ServiceElementPrice) SetAdditionalOneTimePrice(v string) {
	o.AdditionalOneTimePrice = &v
}

// GetAdditionalPeriodicPrice returns the AdditionalPeriodicPrice field value if set, zero value otherwise.
func (o *ServiceElementPrice) GetAdditionalPeriodicPrice() string {
	if o == nil || o.AdditionalPeriodicPrice == nil {
		var ret string
		return ret
	}
	return *o.AdditionalPeriodicPrice
}

// GetAdditionalPeriodicPriceOk returns a tuple with the AdditionalPeriodicPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceElementPrice) GetAdditionalPeriodicPriceOk() (*string, bool) {
	if o == nil || o.AdditionalPeriodicPrice == nil {
		return nil, false
	}
	return o.AdditionalPeriodicPrice, true
}

// HasAdditionalPeriodicPrice returns a boolean if a field has been set.
func (o *ServiceElementPrice) HasAdditionalPeriodicPrice() bool {
	if o != nil && o.AdditionalPeriodicPrice != nil {
		return true
	}

	return false
}

// SetAdditionalPeriodicPrice gets a reference to the given string and assigns it to the AdditionalPeriodicPrice field.
func (o *ServiceElementPrice) SetAdditionalPeriodicPrice(v string) {
	o.AdditionalPeriodicPrice = &v
}

// GetAdditionalQuantity returns the AdditionalQuantity field value if set, zero value otherwise.
func (o *ServiceElementPrice) GetAdditionalQuantity() int32 {
	if o == nil || o.AdditionalQuantity == nil {
		var ret int32
		return ret
	}
	return *o.AdditionalQuantity
}

// GetAdditionalQuantityOk returns a tuple with the AdditionalQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceElementPrice) GetAdditionalQuantityOk() (*int32, bool) {
	if o == nil || o.AdditionalQuantity == nil {
		return nil, false
	}
	return o.AdditionalQuantity, true
}

// HasAdditionalQuantity returns a boolean if a field has been set.
func (o *ServiceElementPrice) HasAdditionalQuantity() bool {
	if o != nil && o.AdditionalQuantity != nil {
		return true
	}

	return false
}

// SetAdditionalQuantity gets a reference to the given int32 and assigns it to the AdditionalQuantity field.
func (o *ServiceElementPrice) SetAdditionalQuantity(v int32) {
	o.AdditionalQuantity = &v
}

func (o ServiceElementPrice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OneTimePrice != nil {
		toSerialize["oneTimePrice"] = o.OneTimePrice
	}
	if o.PeriodicPrice != nil {
		toSerialize["periodicPrice"] = o.PeriodicPrice
	}
	if o.TimePeriod != nil {
		toSerialize["timePeriod"] = o.TimePeriod
	}
	if o.UnitOfMeasure != nil {
		toSerialize["unitOfMeasure"] = o.UnitOfMeasure
	}
	if o.IncludedQuantity != nil {
		toSerialize["includedQuantity"] = o.IncludedQuantity
	}
	if o.AdditionalOneTimePrice != nil {
		toSerialize["additionalOneTimePrice"] = o.AdditionalOneTimePrice
	}
	if o.AdditionalPeriodicPrice != nil {
		toSerialize["additionalPeriodicPrice"] = o.AdditionalPeriodicPrice
	}
	if o.AdditionalQuantity != nil {
		toSerialize["additionalQuantity"] = o.AdditionalQuantity
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ServiceElementPrice) UnmarshalJSON(bytes []byte) (err error) {
	varServiceElementPrice := _ServiceElementPrice{}

	if err = json.Unmarshal(bytes, &varServiceElementPrice); err == nil {
		*o = ServiceElementPrice(varServiceElementPrice)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "oneTimePrice")
		delete(additionalProperties, "periodicPrice")
		delete(additionalProperties, "timePeriod")
		delete(additionalProperties, "unitOfMeasure")
		delete(additionalProperties, "includedQuantity")
		delete(additionalProperties, "additionalOneTimePrice")
		delete(additionalProperties, "additionalPeriodicPrice")
		delete(additionalProperties, "additionalQuantity")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceElementPrice struct {
	value *ServiceElementPrice
	isSet bool
}

func (v NullableServiceElementPrice) Get() *ServiceElementPrice {
	return v.value
}

func (v *NullableServiceElementPrice) Set(val *ServiceElementPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceElementPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceElementPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceElementPrice(val *ServiceElementPrice) *NullableServiceElementPrice {
	return &NullableServiceElementPrice{value: val, isSet: true}
}

func (v NullableServiceElementPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceElementPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


