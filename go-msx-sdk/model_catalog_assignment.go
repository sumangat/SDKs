/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
	"time"
)

// CatalogAssignment struct for CatalogAssignment
type CatalogAssignment struct {
	TenantId *string `json:"tenantId,omitempty"`
	CreatedOn *time.Time `json:"createdOn,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CatalogAssignment CatalogAssignment

// NewCatalogAssignment instantiates a new CatalogAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogAssignment() *CatalogAssignment {
	this := CatalogAssignment{}
	return &this
}

// NewCatalogAssignmentWithDefaults instantiates a new CatalogAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogAssignmentWithDefaults() *CatalogAssignment {
	this := CatalogAssignment{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *CatalogAssignment) GetTenantId() string {
	if o == nil || o.TenantId == nil {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogAssignment) GetTenantIdOk() (*string, bool) {
	if o == nil || o.TenantId == nil {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *CatalogAssignment) HasTenantId() bool {
	if o != nil && o.TenantId != nil {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *CatalogAssignment) SetTenantId(v string) {
	o.TenantId = &v
}

// GetCreatedOn returns the CreatedOn field value if set, zero value otherwise.
func (o *CatalogAssignment) GetCreatedOn() time.Time {
	if o == nil || o.CreatedOn == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogAssignment) GetCreatedOnOk() (*time.Time, bool) {
	if o == nil || o.CreatedOn == nil {
		return nil, false
	}
	return o.CreatedOn, true
}

// HasCreatedOn returns a boolean if a field has been set.
func (o *CatalogAssignment) HasCreatedOn() bool {
	if o != nil && o.CreatedOn != nil {
		return true
	}

	return false
}

// SetCreatedOn gets a reference to the given time.Time and assigns it to the CreatedOn field.
func (o *CatalogAssignment) SetCreatedOn(v time.Time) {
	o.CreatedOn = &v
}

func (o CatalogAssignment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TenantId != nil {
		toSerialize["tenantId"] = o.TenantId
	}
	if o.CreatedOn != nil {
		toSerialize["createdOn"] = o.CreatedOn
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CatalogAssignment) UnmarshalJSON(bytes []byte) (err error) {
	varCatalogAssignment := _CatalogAssignment{}

	if err = json.Unmarshal(bytes, &varCatalogAssignment); err == nil {
		*o = CatalogAssignment(varCatalogAssignment)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "createdOn")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCatalogAssignment struct {
	value *CatalogAssignment
	isSet bool
}

func (v NullableCatalogAssignment) Get() *CatalogAssignment {
	return v.value
}

func (v *NullableCatalogAssignment) Set(val *CatalogAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogAssignment(val *CatalogAssignment) *NullableCatalogAssignment {
	return &NullableCatalogAssignment{value: val, isSet: true}
}

func (v NullableCatalogAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


