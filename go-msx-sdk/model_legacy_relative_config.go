/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// LegacyRelativeConfig struct for LegacyRelativeConfig
type LegacyRelativeConfig struct {
	ScheduleIn *string `json:"scheduleIn,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LegacyRelativeConfig LegacyRelativeConfig

// NewLegacyRelativeConfig instantiates a new LegacyRelativeConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegacyRelativeConfig() *LegacyRelativeConfig {
	this := LegacyRelativeConfig{}
	return &this
}

// NewLegacyRelativeConfigWithDefaults instantiates a new LegacyRelativeConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegacyRelativeConfigWithDefaults() *LegacyRelativeConfig {
	this := LegacyRelativeConfig{}
	return &this
}

// GetScheduleIn returns the ScheduleIn field value if set, zero value otherwise.
func (o *LegacyRelativeConfig) GetScheduleIn() string {
	if o == nil || o.ScheduleIn == nil {
		var ret string
		return ret
	}
	return *o.ScheduleIn
}

// GetScheduleInOk returns a tuple with the ScheduleIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyRelativeConfig) GetScheduleInOk() (*string, bool) {
	if o == nil || o.ScheduleIn == nil {
		return nil, false
	}
	return o.ScheduleIn, true
}

// HasScheduleIn returns a boolean if a field has been set.
func (o *LegacyRelativeConfig) HasScheduleIn() bool {
	if o != nil && o.ScheduleIn != nil {
		return true
	}

	return false
}

// SetScheduleIn gets a reference to the given string and assigns it to the ScheduleIn field.
func (o *LegacyRelativeConfig) SetScheduleIn(v string) {
	o.ScheduleIn = &v
}

func (o LegacyRelativeConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ScheduleIn != nil {
		toSerialize["scheduleIn"] = o.ScheduleIn
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *LegacyRelativeConfig) UnmarshalJSON(bytes []byte) (err error) {
	varLegacyRelativeConfig := _LegacyRelativeConfig{}

	if err = json.Unmarshal(bytes, &varLegacyRelativeConfig); err == nil {
		*o = LegacyRelativeConfig(varLegacyRelativeConfig)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "scheduleIn")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLegacyRelativeConfig struct {
	value *LegacyRelativeConfig
	isSet bool
}

func (v NullableLegacyRelativeConfig) Get() *LegacyRelativeConfig {
	return v.value
}

func (v *NullableLegacyRelativeConfig) Set(val *LegacyRelativeConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacyRelativeConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacyRelativeConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacyRelativeConfig(val *LegacyRelativeConfig) *NullableLegacyRelativeConfig {
	return &NullableLegacyRelativeConfig{value: val, isSet: true}
}

func (v NullableLegacyRelativeConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacyRelativeConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


