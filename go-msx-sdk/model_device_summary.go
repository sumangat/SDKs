/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// DeviceSummary struct for DeviceSummary
type DeviceSummary struct {
	DeviceId *string `json:"deviceId,omitempty"`
	ServiceId *string `json:"serviceId,omitempty"`
	ServiceType *string `json:"serviceType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceSummary DeviceSummary

// NewDeviceSummary instantiates a new DeviceSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceSummary() *DeviceSummary {
	this := DeviceSummary{}
	return &this
}

// NewDeviceSummaryWithDefaults instantiates a new DeviceSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceSummaryWithDefaults() *DeviceSummary {
	this := DeviceSummary{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *DeviceSummary) GetDeviceId() string {
	if o == nil || o.DeviceId == nil {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSummary) GetDeviceIdOk() (*string, bool) {
	if o == nil || o.DeviceId == nil {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *DeviceSummary) HasDeviceId() bool {
	if o != nil && o.DeviceId != nil {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *DeviceSummary) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *DeviceSummary) GetServiceId() string {
	if o == nil || o.ServiceId == nil {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSummary) GetServiceIdOk() (*string, bool) {
	if o == nil || o.ServiceId == nil {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *DeviceSummary) HasServiceId() bool {
	if o != nil && o.ServiceId != nil {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *DeviceSummary) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *DeviceSummary) GetServiceType() string {
	if o == nil || o.ServiceType == nil {
		var ret string
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSummary) GetServiceTypeOk() (*string, bool) {
	if o == nil || o.ServiceType == nil {
		return nil, false
	}
	return o.ServiceType, true
}

// HasServiceType returns a boolean if a field has been set.
func (o *DeviceSummary) HasServiceType() bool {
	if o != nil && o.ServiceType != nil {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given string and assigns it to the ServiceType field.
func (o *DeviceSummary) SetServiceType(v string) {
	o.ServiceType = &v
}

func (o DeviceSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeviceId != nil {
		toSerialize["deviceId"] = o.DeviceId
	}
	if o.ServiceId != nil {
		toSerialize["serviceId"] = o.ServiceId
	}
	if o.ServiceType != nil {
		toSerialize["serviceType"] = o.ServiceType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DeviceSummary) UnmarshalJSON(bytes []byte) (err error) {
	varDeviceSummary := _DeviceSummary{}

	if err = json.Unmarshal(bytes, &varDeviceSummary); err == nil {
		*o = DeviceSummary(varDeviceSummary)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "deviceId")
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "serviceType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceSummary struct {
	value *DeviceSummary
	isSet bool
}

func (v NullableDeviceSummary) Get() *DeviceSummary {
	return v.value
}

func (v *NullableDeviceSummary) Set(val *DeviceSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceSummary(val *DeviceSummary) *NullableDeviceSummary {
	return &NullableDeviceSummary{value: val, isSet: true}
}

func (v NullableDeviceSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


