/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// ResourceHealth struct for ResourceHealth
type ResourceHealth struct {
	Id string `json:"id"`
	Type ResourceType `json:"type"`
	Status ResourceStatus `json:"status"`
	Description NullableString `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ResourceHealth ResourceHealth

// NewResourceHealth instantiates a new ResourceHealth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceHealth(id string, type_ ResourceType, status ResourceStatus) *ResourceHealth {
	this := ResourceHealth{}
	this.Id = id
	this.Type = type_
	this.Status = status
	return &this
}

// NewResourceHealthWithDefaults instantiates a new ResourceHealth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceHealthWithDefaults() *ResourceHealth {
	this := ResourceHealth{}
	return &this
}

// GetId returns the Id field value
func (o *ResourceHealth) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResourceHealth) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResourceHealth) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *ResourceHealth) GetType() ResourceType {
	if o == nil {
		var ret ResourceType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ResourceHealth) GetTypeOk() (*ResourceType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ResourceHealth) SetType(v ResourceType) {
	o.Type = v
}

// GetStatus returns the Status field value
func (o *ResourceHealth) GetStatus() ResourceStatus {
	if o == nil {
		var ret ResourceStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ResourceHealth) GetStatusOk() (*ResourceStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ResourceHealth) SetStatus(v ResourceStatus) {
	o.Status = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceHealth) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceHealth) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ResourceHealth) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ResourceHealth) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ResourceHealth) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ResourceHealth) UnsetDescription() {
	o.Description.Unset()
}

func (o ResourceHealth) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ResourceHealth) UnmarshalJSON(bytes []byte) (err error) {
	varResourceHealth := _ResourceHealth{}

	if err = json.Unmarshal(bytes, &varResourceHealth); err == nil {
		*o = ResourceHealth(varResourceHealth)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "status")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResourceHealth struct {
	value *ResourceHealth
	isSet bool
}

func (v NullableResourceHealth) Get() *ResourceHealth {
	return v.value
}

func (v *NullableResourceHealth) Set(val *ResourceHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceHealth(val *ResourceHealth) *NullableResourceHealth {
	return &NullableResourceHealth{value: val, isSet: true}
}

func (v NullableResourceHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


