/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
	"time"
)

// TenantAllOf struct for TenantAllOf
type TenantAllOf struct {
	Id *string `json:"id,omitempty"`
	CreatedOn *time.Time `json:"createdOn,omitempty"`
	ModifiedOn *time.Time `json:"modifiedOn,omitempty"`
	Suspended NullableBool `json:"suspended,omitempty"`
	NumberOfChildren NullableInt64 `json:"numberOfChildren,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TenantAllOf TenantAllOf

// NewTenantAllOf instantiates a new TenantAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantAllOf() *TenantAllOf {
	this := TenantAllOf{}
	return &this
}

// NewTenantAllOfWithDefaults instantiates a new TenantAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantAllOfWithDefaults() *TenantAllOf {
	this := TenantAllOf{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TenantAllOf) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantAllOf) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TenantAllOf) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TenantAllOf) SetId(v string) {
	o.Id = &v
}

// GetCreatedOn returns the CreatedOn field value if set, zero value otherwise.
func (o *TenantAllOf) GetCreatedOn() time.Time {
	if o == nil || o.CreatedOn == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantAllOf) GetCreatedOnOk() (*time.Time, bool) {
	if o == nil || o.CreatedOn == nil {
		return nil, false
	}
	return o.CreatedOn, true
}

// HasCreatedOn returns a boolean if a field has been set.
func (o *TenantAllOf) HasCreatedOn() bool {
	if o != nil && o.CreatedOn != nil {
		return true
	}

	return false
}

// SetCreatedOn gets a reference to the given time.Time and assigns it to the CreatedOn field.
func (o *TenantAllOf) SetCreatedOn(v time.Time) {
	o.CreatedOn = &v
}

// GetModifiedOn returns the ModifiedOn field value if set, zero value otherwise.
func (o *TenantAllOf) GetModifiedOn() time.Time {
	if o == nil || o.ModifiedOn == nil {
		var ret time.Time
		return ret
	}
	return *o.ModifiedOn
}

// GetModifiedOnOk returns a tuple with the ModifiedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantAllOf) GetModifiedOnOk() (*time.Time, bool) {
	if o == nil || o.ModifiedOn == nil {
		return nil, false
	}
	return o.ModifiedOn, true
}

// HasModifiedOn returns a boolean if a field has been set.
func (o *TenantAllOf) HasModifiedOn() bool {
	if o != nil && o.ModifiedOn != nil {
		return true
	}

	return false
}

// SetModifiedOn gets a reference to the given time.Time and assigns it to the ModifiedOn field.
func (o *TenantAllOf) SetModifiedOn(v time.Time) {
	o.ModifiedOn = &v
}

// GetSuspended returns the Suspended field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantAllOf) GetSuspended() bool {
	if o == nil || o.Suspended.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Suspended.Get()
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantAllOf) GetSuspendedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Suspended.Get(), o.Suspended.IsSet()
}

// HasSuspended returns a boolean if a field has been set.
func (o *TenantAllOf) HasSuspended() bool {
	if o != nil && o.Suspended.IsSet() {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given NullableBool and assigns it to the Suspended field.
func (o *TenantAllOf) SetSuspended(v bool) {
	o.Suspended.Set(&v)
}
// SetSuspendedNil sets the value for Suspended to be an explicit nil
func (o *TenantAllOf) SetSuspendedNil() {
	o.Suspended.Set(nil)
}

// UnsetSuspended ensures that no value is present for Suspended, not even an explicit nil
func (o *TenantAllOf) UnsetSuspended() {
	o.Suspended.Unset()
}

// GetNumberOfChildren returns the NumberOfChildren field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantAllOf) GetNumberOfChildren() int64 {
	if o == nil || o.NumberOfChildren.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumberOfChildren.Get()
}

// GetNumberOfChildrenOk returns a tuple with the NumberOfChildren field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantAllOf) GetNumberOfChildrenOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumberOfChildren.Get(), o.NumberOfChildren.IsSet()
}

// HasNumberOfChildren returns a boolean if a field has been set.
func (o *TenantAllOf) HasNumberOfChildren() bool {
	if o != nil && o.NumberOfChildren.IsSet() {
		return true
	}

	return false
}

// SetNumberOfChildren gets a reference to the given NullableInt64 and assigns it to the NumberOfChildren field.
func (o *TenantAllOf) SetNumberOfChildren(v int64) {
	o.NumberOfChildren.Set(&v)
}
// SetNumberOfChildrenNil sets the value for NumberOfChildren to be an explicit nil
func (o *TenantAllOf) SetNumberOfChildrenNil() {
	o.NumberOfChildren.Set(nil)
}

// UnsetNumberOfChildren ensures that no value is present for NumberOfChildren, not even an explicit nil
func (o *TenantAllOf) UnsetNumberOfChildren() {
	o.NumberOfChildren.Unset()
}

func (o TenantAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CreatedOn != nil {
		toSerialize["createdOn"] = o.CreatedOn
	}
	if o.ModifiedOn != nil {
		toSerialize["modifiedOn"] = o.ModifiedOn
	}
	if o.Suspended.IsSet() {
		toSerialize["suspended"] = o.Suspended.Get()
	}
	if o.NumberOfChildren.IsSet() {
		toSerialize["numberOfChildren"] = o.NumberOfChildren.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TenantAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varTenantAllOf := _TenantAllOf{}

	if err = json.Unmarshal(bytes, &varTenantAllOf); err == nil {
		*o = TenantAllOf(varTenantAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "createdOn")
		delete(additionalProperties, "modifiedOn")
		delete(additionalProperties, "suspended")
		delete(additionalProperties, "numberOfChildren")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTenantAllOf struct {
	value *TenantAllOf
	isSet bool
}

func (v NullableTenantAllOf) Get() *TenantAllOf {
	return v.value
}

func (v *NullableTenantAllOf) Set(val *TenantAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantAllOf(val *TenantAllOf) *NullableTenantAllOf {
	return &NullableTenantAllOf{value: val, isSet: true}
}

func (v NullableTenantAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


