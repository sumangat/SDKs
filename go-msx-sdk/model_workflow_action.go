/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// WorkflowAction struct for WorkflowAction
type WorkflowAction struct {
	Id *string `json:"id,omitempty"`
	WorkflowId NullableString `json:"workflow_id,omitempty"`
	DefinitionId NullableString `json:"definition_id,omitempty"`
	SchemaId NullableString `json:"schema_id,omitempty"`
	AdapterId NullableString `json:"adapter_id,omitempty"`
	UniqueName NullableString `json:"unique_name,omitempty"`
	Name *string `json:"name,omitempty"`
	Title *string `json:"title,omitempty"`
	Type *string `json:"type,omitempty"`
	BaseType *string `json:"base_type,omitempty"`
	Properties map[string]interface{} `json:"properties,omitempty"`
	ObjectType NullableString `json:"object_type,omitempty"`
	StartedBy NullableString `json:"started_by,omitempty"`
	Blocks []WorkflowActionBlock `json:"blocks,omitempty"`
	Status map[string]interface{} `json:"status,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Output map[string]interface{} `json:"output,omitempty"`
	StartedOn NullableString `json:"started_on,omitempty"`
	EndedOn NullableString `json:"ended_on,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkflowAction WorkflowAction

// NewWorkflowAction instantiates a new WorkflowAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowAction() *WorkflowAction {
	this := WorkflowAction{}
	return &this
}

// NewWorkflowActionWithDefaults instantiates a new WorkflowAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowActionWithDefaults() *WorkflowAction {
	this := WorkflowAction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WorkflowAction) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WorkflowAction) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WorkflowAction) SetId(v string) {
	o.Id = &v
}

// GetWorkflowId returns the WorkflowId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetWorkflowId() string {
	if o == nil || o.WorkflowId.Get() == nil {
		var ret string
		return ret
	}
	return *o.WorkflowId.Get()
}

// GetWorkflowIdOk returns a tuple with the WorkflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetWorkflowIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WorkflowId.Get(), o.WorkflowId.IsSet()
}

// HasWorkflowId returns a boolean if a field has been set.
func (o *WorkflowAction) HasWorkflowId() bool {
	if o != nil && o.WorkflowId.IsSet() {
		return true
	}

	return false
}

// SetWorkflowId gets a reference to the given NullableString and assigns it to the WorkflowId field.
func (o *WorkflowAction) SetWorkflowId(v string) {
	o.WorkflowId.Set(&v)
}
// SetWorkflowIdNil sets the value for WorkflowId to be an explicit nil
func (o *WorkflowAction) SetWorkflowIdNil() {
	o.WorkflowId.Set(nil)
}

// UnsetWorkflowId ensures that no value is present for WorkflowId, not even an explicit nil
func (o *WorkflowAction) UnsetWorkflowId() {
	o.WorkflowId.Unset()
}

// GetDefinitionId returns the DefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetDefinitionId() string {
	if o == nil || o.DefinitionId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DefinitionId.Get()
}

// GetDefinitionIdOk returns a tuple with the DefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetDefinitionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DefinitionId.Get(), o.DefinitionId.IsSet()
}

// HasDefinitionId returns a boolean if a field has been set.
func (o *WorkflowAction) HasDefinitionId() bool {
	if o != nil && o.DefinitionId.IsSet() {
		return true
	}

	return false
}

// SetDefinitionId gets a reference to the given NullableString and assigns it to the DefinitionId field.
func (o *WorkflowAction) SetDefinitionId(v string) {
	o.DefinitionId.Set(&v)
}
// SetDefinitionIdNil sets the value for DefinitionId to be an explicit nil
func (o *WorkflowAction) SetDefinitionIdNil() {
	o.DefinitionId.Set(nil)
}

// UnsetDefinitionId ensures that no value is present for DefinitionId, not even an explicit nil
func (o *WorkflowAction) UnsetDefinitionId() {
	o.DefinitionId.Unset()
}

// GetSchemaId returns the SchemaId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetSchemaId() string {
	if o == nil || o.SchemaId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SchemaId.Get()
}

// GetSchemaIdOk returns a tuple with the SchemaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetSchemaIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SchemaId.Get(), o.SchemaId.IsSet()
}

// HasSchemaId returns a boolean if a field has been set.
func (o *WorkflowAction) HasSchemaId() bool {
	if o != nil && o.SchemaId.IsSet() {
		return true
	}

	return false
}

// SetSchemaId gets a reference to the given NullableString and assigns it to the SchemaId field.
func (o *WorkflowAction) SetSchemaId(v string) {
	o.SchemaId.Set(&v)
}
// SetSchemaIdNil sets the value for SchemaId to be an explicit nil
func (o *WorkflowAction) SetSchemaIdNil() {
	o.SchemaId.Set(nil)
}

// UnsetSchemaId ensures that no value is present for SchemaId, not even an explicit nil
func (o *WorkflowAction) UnsetSchemaId() {
	o.SchemaId.Unset()
}

// GetAdapterId returns the AdapterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetAdapterId() string {
	if o == nil || o.AdapterId.Get() == nil {
		var ret string
		return ret
	}
	return *o.AdapterId.Get()
}

// GetAdapterIdOk returns a tuple with the AdapterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetAdapterIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AdapterId.Get(), o.AdapterId.IsSet()
}

// HasAdapterId returns a boolean if a field has been set.
func (o *WorkflowAction) HasAdapterId() bool {
	if o != nil && o.AdapterId.IsSet() {
		return true
	}

	return false
}

// SetAdapterId gets a reference to the given NullableString and assigns it to the AdapterId field.
func (o *WorkflowAction) SetAdapterId(v string) {
	o.AdapterId.Set(&v)
}
// SetAdapterIdNil sets the value for AdapterId to be an explicit nil
func (o *WorkflowAction) SetAdapterIdNil() {
	o.AdapterId.Set(nil)
}

// UnsetAdapterId ensures that no value is present for AdapterId, not even an explicit nil
func (o *WorkflowAction) UnsetAdapterId() {
	o.AdapterId.Unset()
}

// GetUniqueName returns the UniqueName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetUniqueName() string {
	if o == nil || o.UniqueName.Get() == nil {
		var ret string
		return ret
	}
	return *o.UniqueName.Get()
}

// GetUniqueNameOk returns a tuple with the UniqueName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetUniqueNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UniqueName.Get(), o.UniqueName.IsSet()
}

// HasUniqueName returns a boolean if a field has been set.
func (o *WorkflowAction) HasUniqueName() bool {
	if o != nil && o.UniqueName.IsSet() {
		return true
	}

	return false
}

// SetUniqueName gets a reference to the given NullableString and assigns it to the UniqueName field.
func (o *WorkflowAction) SetUniqueName(v string) {
	o.UniqueName.Set(&v)
}
// SetUniqueNameNil sets the value for UniqueName to be an explicit nil
func (o *WorkflowAction) SetUniqueNameNil() {
	o.UniqueName.Set(nil)
}

// UnsetUniqueName ensures that no value is present for UniqueName, not even an explicit nil
func (o *WorkflowAction) UnsetUniqueName() {
	o.UniqueName.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkflowAction) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkflowAction) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkflowAction) SetName(v string) {
	o.Name = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *WorkflowAction) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *WorkflowAction) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *WorkflowAction) SetTitle(v string) {
	o.Title = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WorkflowAction) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WorkflowAction) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *WorkflowAction) SetType(v string) {
	o.Type = &v
}

// GetBaseType returns the BaseType field value if set, zero value otherwise.
func (o *WorkflowAction) GetBaseType() string {
	if o == nil || o.BaseType == nil {
		var ret string
		return ret
	}
	return *o.BaseType
}

// GetBaseTypeOk returns a tuple with the BaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetBaseTypeOk() (*string, bool) {
	if o == nil || o.BaseType == nil {
		return nil, false
	}
	return o.BaseType, true
}

// HasBaseType returns a boolean if a field has been set.
func (o *WorkflowAction) HasBaseType() bool {
	if o != nil && o.BaseType != nil {
		return true
	}

	return false
}

// SetBaseType gets a reference to the given string and assigns it to the BaseType field.
func (o *WorkflowAction) SetBaseType(v string) {
	o.BaseType = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetProperties() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetPropertiesOk() (*map[string]interface{}, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return &o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *WorkflowAction) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *WorkflowAction) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetObjectType() string {
	if o == nil || o.ObjectType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ObjectType.Get()
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetObjectTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectType.Get(), o.ObjectType.IsSet()
}

// HasObjectType returns a boolean if a field has been set.
func (o *WorkflowAction) HasObjectType() bool {
	if o != nil && o.ObjectType.IsSet() {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given NullableString and assigns it to the ObjectType field.
func (o *WorkflowAction) SetObjectType(v string) {
	o.ObjectType.Set(&v)
}
// SetObjectTypeNil sets the value for ObjectType to be an explicit nil
func (o *WorkflowAction) SetObjectTypeNil() {
	o.ObjectType.Set(nil)
}

// UnsetObjectType ensures that no value is present for ObjectType, not even an explicit nil
func (o *WorkflowAction) UnsetObjectType() {
	o.ObjectType.Unset()
}

// GetStartedBy returns the StartedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetStartedBy() string {
	if o == nil || o.StartedBy.Get() == nil {
		var ret string
		return ret
	}
	return *o.StartedBy.Get()
}

// GetStartedByOk returns a tuple with the StartedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetStartedByOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartedBy.Get(), o.StartedBy.IsSet()
}

// HasStartedBy returns a boolean if a field has been set.
func (o *WorkflowAction) HasStartedBy() bool {
	if o != nil && o.StartedBy.IsSet() {
		return true
	}

	return false
}

// SetStartedBy gets a reference to the given NullableString and assigns it to the StartedBy field.
func (o *WorkflowAction) SetStartedBy(v string) {
	o.StartedBy.Set(&v)
}
// SetStartedByNil sets the value for StartedBy to be an explicit nil
func (o *WorkflowAction) SetStartedByNil() {
	o.StartedBy.Set(nil)
}

// UnsetStartedBy ensures that no value is present for StartedBy, not even an explicit nil
func (o *WorkflowAction) UnsetStartedBy() {
	o.StartedBy.Unset()
}

// GetBlocks returns the Blocks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetBlocks() []WorkflowActionBlock {
	if o == nil  {
		var ret []WorkflowActionBlock
		return ret
	}
	return o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetBlocksOk() (*[]WorkflowActionBlock, bool) {
	if o == nil || o.Blocks == nil {
		return nil, false
	}
	return &o.Blocks, true
}

// HasBlocks returns a boolean if a field has been set.
func (o *WorkflowAction) HasBlocks() bool {
	if o != nil && o.Blocks != nil {
		return true
	}

	return false
}

// SetBlocks gets a reference to the given []WorkflowActionBlock and assigns it to the Blocks field.
func (o *WorkflowAction) SetBlocks(v []WorkflowActionBlock) {
	o.Blocks = v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetStatus() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetStatusOk() (*map[string]interface{}, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return &o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WorkflowAction) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given map[string]interface{} and assigns it to the Status field.
func (o *WorkflowAction) SetStatus(v map[string]interface{}) {
	o.Status = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *WorkflowAction) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *WorkflowAction) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *WorkflowAction) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *WorkflowAction) UnsetDescription() {
	o.Description.Unset()
}

// GetOutput returns the Output field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetOutput() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetOutputOk() (*map[string]interface{}, bool) {
	if o == nil || o.Output == nil {
		return nil, false
	}
	return &o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *WorkflowAction) HasOutput() bool {
	if o != nil && o.Output != nil {
		return true
	}

	return false
}

// SetOutput gets a reference to the given map[string]interface{} and assigns it to the Output field.
func (o *WorkflowAction) SetOutput(v map[string]interface{}) {
	o.Output = v
}

// GetStartedOn returns the StartedOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetStartedOn() string {
	if o == nil || o.StartedOn.Get() == nil {
		var ret string
		return ret
	}
	return *o.StartedOn.Get()
}

// GetStartedOnOk returns a tuple with the StartedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetStartedOnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartedOn.Get(), o.StartedOn.IsSet()
}

// HasStartedOn returns a boolean if a field has been set.
func (o *WorkflowAction) HasStartedOn() bool {
	if o != nil && o.StartedOn.IsSet() {
		return true
	}

	return false
}

// SetStartedOn gets a reference to the given NullableString and assigns it to the StartedOn field.
func (o *WorkflowAction) SetStartedOn(v string) {
	o.StartedOn.Set(&v)
}
// SetStartedOnNil sets the value for StartedOn to be an explicit nil
func (o *WorkflowAction) SetStartedOnNil() {
	o.StartedOn.Set(nil)
}

// UnsetStartedOn ensures that no value is present for StartedOn, not even an explicit nil
func (o *WorkflowAction) UnsetStartedOn() {
	o.StartedOn.Unset()
}

// GetEndedOn returns the EndedOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetEndedOn() string {
	if o == nil || o.EndedOn.Get() == nil {
		var ret string
		return ret
	}
	return *o.EndedOn.Get()
}

// GetEndedOnOk returns a tuple with the EndedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetEndedOnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndedOn.Get(), o.EndedOn.IsSet()
}

// HasEndedOn returns a boolean if a field has been set.
func (o *WorkflowAction) HasEndedOn() bool {
	if o != nil && o.EndedOn.IsSet() {
		return true
	}

	return false
}

// SetEndedOn gets a reference to the given NullableString and assigns it to the EndedOn field.
func (o *WorkflowAction) SetEndedOn(v string) {
	o.EndedOn.Set(&v)
}
// SetEndedOnNil sets the value for EndedOn to be an explicit nil
func (o *WorkflowAction) SetEndedOnNil() {
	o.EndedOn.Set(nil)
}

// UnsetEndedOn ensures that no value is present for EndedOn, not even an explicit nil
func (o *WorkflowAction) UnsetEndedOn() {
	o.EndedOn.Unset()
}

func (o WorkflowAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.WorkflowId.IsSet() {
		toSerialize["workflow_id"] = o.WorkflowId.Get()
	}
	if o.DefinitionId.IsSet() {
		toSerialize["definition_id"] = o.DefinitionId.Get()
	}
	if o.SchemaId.IsSet() {
		toSerialize["schema_id"] = o.SchemaId.Get()
	}
	if o.AdapterId.IsSet() {
		toSerialize["adapter_id"] = o.AdapterId.Get()
	}
	if o.UniqueName.IsSet() {
		toSerialize["unique_name"] = o.UniqueName.Get()
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.BaseType != nil {
		toSerialize["base_type"] = o.BaseType
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.ObjectType.IsSet() {
		toSerialize["object_type"] = o.ObjectType.Get()
	}
	if o.StartedBy.IsSet() {
		toSerialize["started_by"] = o.StartedBy.Get()
	}
	if o.Blocks != nil {
		toSerialize["blocks"] = o.Blocks
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Output != nil {
		toSerialize["output"] = o.Output
	}
	if o.StartedOn.IsSet() {
		toSerialize["started_on"] = o.StartedOn.Get()
	}
	if o.EndedOn.IsSet() {
		toSerialize["ended_on"] = o.EndedOn.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *WorkflowAction) UnmarshalJSON(bytes []byte) (err error) {
	varWorkflowAction := _WorkflowAction{}

	if err = json.Unmarshal(bytes, &varWorkflowAction); err == nil {
		*o = WorkflowAction(varWorkflowAction)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "workflow_id")
		delete(additionalProperties, "definition_id")
		delete(additionalProperties, "schema_id")
		delete(additionalProperties, "adapter_id")
		delete(additionalProperties, "unique_name")
		delete(additionalProperties, "name")
		delete(additionalProperties, "title")
		delete(additionalProperties, "type")
		delete(additionalProperties, "base_type")
		delete(additionalProperties, "properties")
		delete(additionalProperties, "object_type")
		delete(additionalProperties, "started_by")
		delete(additionalProperties, "blocks")
		delete(additionalProperties, "status")
		delete(additionalProperties, "description")
		delete(additionalProperties, "output")
		delete(additionalProperties, "started_on")
		delete(additionalProperties, "ended_on")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkflowAction struct {
	value *WorkflowAction
	isSet bool
}

func (v NullableWorkflowAction) Get() *WorkflowAction {
	return v.value
}

func (v *NullableWorkflowAction) Set(val *WorkflowAction) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowAction) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowAction(val *WorkflowAction) *NullableWorkflowAction {
	return &NullableWorkflowAction{value: val, isSet: true}
}

func (v NullableWorkflowAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


