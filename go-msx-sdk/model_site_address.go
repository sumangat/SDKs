/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// SiteAddress struct for SiteAddress
type SiteAddress struct {
	Name *string `json:"name,omitempty"`
	Company *string `json:"company,omitempty"`
	FormattedAddress *string `json:"formattedAddress,omitempty"`
	Address1 *string `json:"address1,omitempty"`
	Address2 *string `json:"address2,omitempty"`
	City *string `json:"city,omitempty"`
	State *string `json:"state,omitempty"`
	Country *string `json:"country,omitempty"`
	PostCode *string `json:"postCode,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SiteAddress SiteAddress

// NewSiteAddress instantiates a new SiteAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteAddress() *SiteAddress {
	this := SiteAddress{}
	return &this
}

// NewSiteAddressWithDefaults instantiates a new SiteAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteAddressWithDefaults() *SiteAddress {
	this := SiteAddress{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SiteAddress) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAddress) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SiteAddress) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SiteAddress) SetName(v string) {
	o.Name = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *SiteAddress) GetCompany() string {
	if o == nil || o.Company == nil {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAddress) GetCompanyOk() (*string, bool) {
	if o == nil || o.Company == nil {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *SiteAddress) HasCompany() bool {
	if o != nil && o.Company != nil {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *SiteAddress) SetCompany(v string) {
	o.Company = &v
}

// GetFormattedAddress returns the FormattedAddress field value if set, zero value otherwise.
func (o *SiteAddress) GetFormattedAddress() string {
	if o == nil || o.FormattedAddress == nil {
		var ret string
		return ret
	}
	return *o.FormattedAddress
}

// GetFormattedAddressOk returns a tuple with the FormattedAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAddress) GetFormattedAddressOk() (*string, bool) {
	if o == nil || o.FormattedAddress == nil {
		return nil, false
	}
	return o.FormattedAddress, true
}

// HasFormattedAddress returns a boolean if a field has been set.
func (o *SiteAddress) HasFormattedAddress() bool {
	if o != nil && o.FormattedAddress != nil {
		return true
	}

	return false
}

// SetFormattedAddress gets a reference to the given string and assigns it to the FormattedAddress field.
func (o *SiteAddress) SetFormattedAddress(v string) {
	o.FormattedAddress = &v
}

// GetAddress1 returns the Address1 field value if set, zero value otherwise.
func (o *SiteAddress) GetAddress1() string {
	if o == nil || o.Address1 == nil {
		var ret string
		return ret
	}
	return *o.Address1
}

// GetAddress1Ok returns a tuple with the Address1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAddress) GetAddress1Ok() (*string, bool) {
	if o == nil || o.Address1 == nil {
		return nil, false
	}
	return o.Address1, true
}

// HasAddress1 returns a boolean if a field has been set.
func (o *SiteAddress) HasAddress1() bool {
	if o != nil && o.Address1 != nil {
		return true
	}

	return false
}

// SetAddress1 gets a reference to the given string and assigns it to the Address1 field.
func (o *SiteAddress) SetAddress1(v string) {
	o.Address1 = &v
}

// GetAddress2 returns the Address2 field value if set, zero value otherwise.
func (o *SiteAddress) GetAddress2() string {
	if o == nil || o.Address2 == nil {
		var ret string
		return ret
	}
	return *o.Address2
}

// GetAddress2Ok returns a tuple with the Address2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAddress) GetAddress2Ok() (*string, bool) {
	if o == nil || o.Address2 == nil {
		return nil, false
	}
	return o.Address2, true
}

// HasAddress2 returns a boolean if a field has been set.
func (o *SiteAddress) HasAddress2() bool {
	if o != nil && o.Address2 != nil {
		return true
	}

	return false
}

// SetAddress2 gets a reference to the given string and assigns it to the Address2 field.
func (o *SiteAddress) SetAddress2(v string) {
	o.Address2 = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *SiteAddress) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAddress) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *SiteAddress) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *SiteAddress) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *SiteAddress) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAddress) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *SiteAddress) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *SiteAddress) SetState(v string) {
	o.State = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *SiteAddress) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAddress) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *SiteAddress) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *SiteAddress) SetCountry(v string) {
	o.Country = &v
}

// GetPostCode returns the PostCode field value if set, zero value otherwise.
func (o *SiteAddress) GetPostCode() string {
	if o == nil || o.PostCode == nil {
		var ret string
		return ret
	}
	return *o.PostCode
}

// GetPostCodeOk returns a tuple with the PostCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAddress) GetPostCodeOk() (*string, bool) {
	if o == nil || o.PostCode == nil {
		return nil, false
	}
	return o.PostCode, true
}

// HasPostCode returns a boolean if a field has been set.
func (o *SiteAddress) HasPostCode() bool {
	if o != nil && o.PostCode != nil {
		return true
	}

	return false
}

// SetPostCode gets a reference to the given string and assigns it to the PostCode field.
func (o *SiteAddress) SetPostCode(v string) {
	o.PostCode = &v
}

func (o SiteAddress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Company != nil {
		toSerialize["company"] = o.Company
	}
	if o.FormattedAddress != nil {
		toSerialize["formattedAddress"] = o.FormattedAddress
	}
	if o.Address1 != nil {
		toSerialize["address1"] = o.Address1
	}
	if o.Address2 != nil {
		toSerialize["address2"] = o.Address2
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.PostCode != nil {
		toSerialize["postCode"] = o.PostCode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SiteAddress) UnmarshalJSON(bytes []byte) (err error) {
	varSiteAddress := _SiteAddress{}

	if err = json.Unmarshal(bytes, &varSiteAddress); err == nil {
		*o = SiteAddress(varSiteAddress)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "company")
		delete(additionalProperties, "formattedAddress")
		delete(additionalProperties, "address1")
		delete(additionalProperties, "address2")
		delete(additionalProperties, "city")
		delete(additionalProperties, "state")
		delete(additionalProperties, "country")
		delete(additionalProperties, "postCode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSiteAddress struct {
	value *SiteAddress
	isSet bool
}

func (v NullableSiteAddress) Get() *SiteAddress {
	return v.value
}

func (v *NullableSiteAddress) Set(val *SiteAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteAddress(val *SiteAddress) *NullableSiteAddress {
	return &NullableSiteAddress{value: val, isSet: true}
}

func (v NullableSiteAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


