/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// TemplateAssignmentAllOf struct for TemplateAssignmentAllOf
type TemplateAssignmentAllOf struct {
	Id *string `json:"id,omitempty"`
	TemplateId *string `json:"templateId,omitempty"`
	TemplateName *string `json:"templateName,omitempty"`
	TenantId *string `json:"tenantId,omitempty"`
	AssignedTenantId *string `json:"assignedTenantId,omitempty"`
	Inheritable NullableBool `json:"inheritable,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TemplateAssignmentAllOf TemplateAssignmentAllOf

// NewTemplateAssignmentAllOf instantiates a new TemplateAssignmentAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateAssignmentAllOf() *TemplateAssignmentAllOf {
	this := TemplateAssignmentAllOf{}
	return &this
}

// NewTemplateAssignmentAllOfWithDefaults instantiates a new TemplateAssignmentAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateAssignmentAllOfWithDefaults() *TemplateAssignmentAllOf {
	this := TemplateAssignmentAllOf{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TemplateAssignmentAllOf) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAssignmentAllOf) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TemplateAssignmentAllOf) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TemplateAssignmentAllOf) SetId(v string) {
	o.Id = &v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise.
func (o *TemplateAssignmentAllOf) GetTemplateId() string {
	if o == nil || o.TemplateId == nil {
		var ret string
		return ret
	}
	return *o.TemplateId
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAssignmentAllOf) GetTemplateIdOk() (*string, bool) {
	if o == nil || o.TemplateId == nil {
		return nil, false
	}
	return o.TemplateId, true
}

// HasTemplateId returns a boolean if a field has been set.
func (o *TemplateAssignmentAllOf) HasTemplateId() bool {
	if o != nil && o.TemplateId != nil {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given string and assigns it to the TemplateId field.
func (o *TemplateAssignmentAllOf) SetTemplateId(v string) {
	o.TemplateId = &v
}

// GetTemplateName returns the TemplateName field value if set, zero value otherwise.
func (o *TemplateAssignmentAllOf) GetTemplateName() string {
	if o == nil || o.TemplateName == nil {
		var ret string
		return ret
	}
	return *o.TemplateName
}

// GetTemplateNameOk returns a tuple with the TemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAssignmentAllOf) GetTemplateNameOk() (*string, bool) {
	if o == nil || o.TemplateName == nil {
		return nil, false
	}
	return o.TemplateName, true
}

// HasTemplateName returns a boolean if a field has been set.
func (o *TemplateAssignmentAllOf) HasTemplateName() bool {
	if o != nil && o.TemplateName != nil {
		return true
	}

	return false
}

// SetTemplateName gets a reference to the given string and assigns it to the TemplateName field.
func (o *TemplateAssignmentAllOf) SetTemplateName(v string) {
	o.TemplateName = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *TemplateAssignmentAllOf) GetTenantId() string {
	if o == nil || o.TenantId == nil {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAssignmentAllOf) GetTenantIdOk() (*string, bool) {
	if o == nil || o.TenantId == nil {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *TemplateAssignmentAllOf) HasTenantId() bool {
	if o != nil && o.TenantId != nil {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *TemplateAssignmentAllOf) SetTenantId(v string) {
	o.TenantId = &v
}

// GetAssignedTenantId returns the AssignedTenantId field value if set, zero value otherwise.
func (o *TemplateAssignmentAllOf) GetAssignedTenantId() string {
	if o == nil || o.AssignedTenantId == nil {
		var ret string
		return ret
	}
	return *o.AssignedTenantId
}

// GetAssignedTenantIdOk returns a tuple with the AssignedTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAssignmentAllOf) GetAssignedTenantIdOk() (*string, bool) {
	if o == nil || o.AssignedTenantId == nil {
		return nil, false
	}
	return o.AssignedTenantId, true
}

// HasAssignedTenantId returns a boolean if a field has been set.
func (o *TemplateAssignmentAllOf) HasAssignedTenantId() bool {
	if o != nil && o.AssignedTenantId != nil {
		return true
	}

	return false
}

// SetAssignedTenantId gets a reference to the given string and assigns it to the AssignedTenantId field.
func (o *TemplateAssignmentAllOf) SetAssignedTenantId(v string) {
	o.AssignedTenantId = &v
}

// GetInheritable returns the Inheritable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TemplateAssignmentAllOf) GetInheritable() bool {
	if o == nil || o.Inheritable.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Inheritable.Get()
}

// GetInheritableOk returns a tuple with the Inheritable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TemplateAssignmentAllOf) GetInheritableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Inheritable.Get(), o.Inheritable.IsSet()
}

// HasInheritable returns a boolean if a field has been set.
func (o *TemplateAssignmentAllOf) HasInheritable() bool {
	if o != nil && o.Inheritable.IsSet() {
		return true
	}

	return false
}

// SetInheritable gets a reference to the given NullableBool and assigns it to the Inheritable field.
func (o *TemplateAssignmentAllOf) SetInheritable(v bool) {
	o.Inheritable.Set(&v)
}
// SetInheritableNil sets the value for Inheritable to be an explicit nil
func (o *TemplateAssignmentAllOf) SetInheritableNil() {
	o.Inheritable.Set(nil)
}

// UnsetInheritable ensures that no value is present for Inheritable, not even an explicit nil
func (o *TemplateAssignmentAllOf) UnsetInheritable() {
	o.Inheritable.Unset()
}

func (o TemplateAssignmentAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.TemplateId != nil {
		toSerialize["templateId"] = o.TemplateId
	}
	if o.TemplateName != nil {
		toSerialize["templateName"] = o.TemplateName
	}
	if o.TenantId != nil {
		toSerialize["tenantId"] = o.TenantId
	}
	if o.AssignedTenantId != nil {
		toSerialize["assignedTenantId"] = o.AssignedTenantId
	}
	if o.Inheritable.IsSet() {
		toSerialize["inheritable"] = o.Inheritable.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TemplateAssignmentAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varTemplateAssignmentAllOf := _TemplateAssignmentAllOf{}

	if err = json.Unmarshal(bytes, &varTemplateAssignmentAllOf); err == nil {
		*o = TemplateAssignmentAllOf(varTemplateAssignmentAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "templateId")
		delete(additionalProperties, "templateName")
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "assignedTenantId")
		delete(additionalProperties, "inheritable")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTemplateAssignmentAllOf struct {
	value *TemplateAssignmentAllOf
	isSet bool
}

func (v NullableTemplateAssignmentAllOf) Get() *TemplateAssignmentAllOf {
	return v.value
}

func (v *NullableTemplateAssignmentAllOf) Set(val *TemplateAssignmentAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateAssignmentAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateAssignmentAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateAssignmentAllOf(val *TemplateAssignmentAllOf) *NullableTemplateAssignmentAllOf {
	return &NullableTemplateAssignmentAllOf{value: val, isSet: true}
}

func (v NullableTemplateAssignmentAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateAssignmentAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


