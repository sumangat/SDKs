/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// LegacyScheduleConfig struct for LegacyScheduleConfig
type LegacyScheduleConfig struct {
	Method *string `json:"method,omitempty"`
	Relative *LegacyRelativeConfig `json:"relative,omitempty"`
	Absolute *LegacyAbsoluteConfig `json:"absolute,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LegacyScheduleConfig LegacyScheduleConfig

// NewLegacyScheduleConfig instantiates a new LegacyScheduleConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegacyScheduleConfig() *LegacyScheduleConfig {
	this := LegacyScheduleConfig{}
	return &this
}

// NewLegacyScheduleConfigWithDefaults instantiates a new LegacyScheduleConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegacyScheduleConfigWithDefaults() *LegacyScheduleConfig {
	this := LegacyScheduleConfig{}
	return &this
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *LegacyScheduleConfig) GetMethod() string {
	if o == nil || o.Method == nil {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyScheduleConfig) GetMethodOk() (*string, bool) {
	if o == nil || o.Method == nil {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *LegacyScheduleConfig) HasMethod() bool {
	if o != nil && o.Method != nil {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *LegacyScheduleConfig) SetMethod(v string) {
	o.Method = &v
}

// GetRelative returns the Relative field value if set, zero value otherwise.
func (o *LegacyScheduleConfig) GetRelative() LegacyRelativeConfig {
	if o == nil || o.Relative == nil {
		var ret LegacyRelativeConfig
		return ret
	}
	return *o.Relative
}

// GetRelativeOk returns a tuple with the Relative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyScheduleConfig) GetRelativeOk() (*LegacyRelativeConfig, bool) {
	if o == nil || o.Relative == nil {
		return nil, false
	}
	return o.Relative, true
}

// HasRelative returns a boolean if a field has been set.
func (o *LegacyScheduleConfig) HasRelative() bool {
	if o != nil && o.Relative != nil {
		return true
	}

	return false
}

// SetRelative gets a reference to the given LegacyRelativeConfig and assigns it to the Relative field.
func (o *LegacyScheduleConfig) SetRelative(v LegacyRelativeConfig) {
	o.Relative = &v
}

// GetAbsolute returns the Absolute field value if set, zero value otherwise.
func (o *LegacyScheduleConfig) GetAbsolute() LegacyAbsoluteConfig {
	if o == nil || o.Absolute == nil {
		var ret LegacyAbsoluteConfig
		return ret
	}
	return *o.Absolute
}

// GetAbsoluteOk returns a tuple with the Absolute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyScheduleConfig) GetAbsoluteOk() (*LegacyAbsoluteConfig, bool) {
	if o == nil || o.Absolute == nil {
		return nil, false
	}
	return o.Absolute, true
}

// HasAbsolute returns a boolean if a field has been set.
func (o *LegacyScheduleConfig) HasAbsolute() bool {
	if o != nil && o.Absolute != nil {
		return true
	}

	return false
}

// SetAbsolute gets a reference to the given LegacyAbsoluteConfig and assigns it to the Absolute field.
func (o *LegacyScheduleConfig) SetAbsolute(v LegacyAbsoluteConfig) {
	o.Absolute = &v
}

func (o LegacyScheduleConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Method != nil {
		toSerialize["method"] = o.Method
	}
	if o.Relative != nil {
		toSerialize["relative"] = o.Relative
	}
	if o.Absolute != nil {
		toSerialize["absolute"] = o.Absolute
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *LegacyScheduleConfig) UnmarshalJSON(bytes []byte) (err error) {
	varLegacyScheduleConfig := _LegacyScheduleConfig{}

	if err = json.Unmarshal(bytes, &varLegacyScheduleConfig); err == nil {
		*o = LegacyScheduleConfig(varLegacyScheduleConfig)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "method")
		delete(additionalProperties, "relative")
		delete(additionalProperties, "absolute")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLegacyScheduleConfig struct {
	value *LegacyScheduleConfig
	isSet bool
}

func (v NullableLegacyScheduleConfig) Get() *LegacyScheduleConfig {
	return v.value
}

func (v *NullableLegacyScheduleConfig) Set(val *LegacyScheduleConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacyScheduleConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacyScheduleConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacyScheduleConfig(val *LegacyScheduleConfig) *NullableLegacyScheduleConfig {
	return &NullableLegacyScheduleConfig{value: val, isSet: true}
}

func (v NullableLegacyScheduleConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacyScheduleConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


