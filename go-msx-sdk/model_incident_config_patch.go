/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// IncidentConfigPatch struct for IncidentConfigPatch
type IncidentConfigPatch struct {
	ClientId *string `json:"clientId,omitempty"`
	ClientSecret *string `json:"clientSecret,omitempty"`
	CriticalEvent *bool `json:"criticalEvent,omitempty"`
	Domain *string `json:"domain,omitempty"`
	Password *string `json:"password,omitempty"`
	UserName *string `json:"userName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IncidentConfigPatch IncidentConfigPatch

// NewIncidentConfigPatch instantiates a new IncidentConfigPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentConfigPatch() *IncidentConfigPatch {
	this := IncidentConfigPatch{}
	return &this
}

// NewIncidentConfigPatchWithDefaults instantiates a new IncidentConfigPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentConfigPatchWithDefaults() *IncidentConfigPatch {
	this := IncidentConfigPatch{}
	return &this
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *IncidentConfigPatch) GetClientId() string {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentConfigPatch) GetClientIdOk() (*string, bool) {
	if o == nil || o.ClientId == nil {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *IncidentConfigPatch) HasClientId() bool {
	if o != nil && o.ClientId != nil {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *IncidentConfigPatch) SetClientId(v string) {
	o.ClientId = &v
}

// GetClientSecret returns the ClientSecret field value if set, zero value otherwise.
func (o *IncidentConfigPatch) GetClientSecret() string {
	if o == nil || o.ClientSecret == nil {
		var ret string
		return ret
	}
	return *o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentConfigPatch) GetClientSecretOk() (*string, bool) {
	if o == nil || o.ClientSecret == nil {
		return nil, false
	}
	return o.ClientSecret, true
}

// HasClientSecret returns a boolean if a field has been set.
func (o *IncidentConfigPatch) HasClientSecret() bool {
	if o != nil && o.ClientSecret != nil {
		return true
	}

	return false
}

// SetClientSecret gets a reference to the given string and assigns it to the ClientSecret field.
func (o *IncidentConfigPatch) SetClientSecret(v string) {
	o.ClientSecret = &v
}

// GetCriticalEvent returns the CriticalEvent field value if set, zero value otherwise.
func (o *IncidentConfigPatch) GetCriticalEvent() bool {
	if o == nil || o.CriticalEvent == nil {
		var ret bool
		return ret
	}
	return *o.CriticalEvent
}

// GetCriticalEventOk returns a tuple with the CriticalEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentConfigPatch) GetCriticalEventOk() (*bool, bool) {
	if o == nil || o.CriticalEvent == nil {
		return nil, false
	}
	return o.CriticalEvent, true
}

// HasCriticalEvent returns a boolean if a field has been set.
func (o *IncidentConfigPatch) HasCriticalEvent() bool {
	if o != nil && o.CriticalEvent != nil {
		return true
	}

	return false
}

// SetCriticalEvent gets a reference to the given bool and assigns it to the CriticalEvent field.
func (o *IncidentConfigPatch) SetCriticalEvent(v bool) {
	o.CriticalEvent = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *IncidentConfigPatch) GetDomain() string {
	if o == nil || o.Domain == nil {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentConfigPatch) GetDomainOk() (*string, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *IncidentConfigPatch) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *IncidentConfigPatch) SetDomain(v string) {
	o.Domain = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *IncidentConfigPatch) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentConfigPatch) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *IncidentConfigPatch) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *IncidentConfigPatch) SetPassword(v string) {
	o.Password = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *IncidentConfigPatch) GetUserName() string {
	if o == nil || o.UserName == nil {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentConfigPatch) GetUserNameOk() (*string, bool) {
	if o == nil || o.UserName == nil {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *IncidentConfigPatch) HasUserName() bool {
	if o != nil && o.UserName != nil {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *IncidentConfigPatch) SetUserName(v string) {
	o.UserName = &v
}

func (o IncidentConfigPatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClientId != nil {
		toSerialize["clientId"] = o.ClientId
	}
	if o.ClientSecret != nil {
		toSerialize["clientSecret"] = o.ClientSecret
	}
	if o.CriticalEvent != nil {
		toSerialize["criticalEvent"] = o.CriticalEvent
	}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.UserName != nil {
		toSerialize["userName"] = o.UserName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IncidentConfigPatch) UnmarshalJSON(bytes []byte) (err error) {
	varIncidentConfigPatch := _IncidentConfigPatch{}

	if err = json.Unmarshal(bytes, &varIncidentConfigPatch); err == nil {
		*o = IncidentConfigPatch(varIncidentConfigPatch)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "clientId")
		delete(additionalProperties, "clientSecret")
		delete(additionalProperties, "criticalEvent")
		delete(additionalProperties, "domain")
		delete(additionalProperties, "password")
		delete(additionalProperties, "userName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIncidentConfigPatch struct {
	value *IncidentConfigPatch
	isSet bool
}

func (v NullableIncidentConfigPatch) Get() *IncidentConfigPatch {
	return v.value
}

func (v *NullableIncidentConfigPatch) Set(val *IncidentConfigPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentConfigPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentConfigPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentConfigPatch(val *IncidentConfigPatch) *NullableIncidentConfigPatch {
	return &NullableIncidentConfigPatch{value: val, isSet: true}
}

func (v NullableIncidentConfigPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentConfigPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


