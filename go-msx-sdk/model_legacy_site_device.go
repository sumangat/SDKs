/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// LegacySiteDevice struct for LegacySiteDevice
type LegacySiteDevice struct {
	DeviceId *string `json:"deviceId,omitempty"`
	Name string `json:"name"`
	Model *string `json:"model,omitempty"`
	Type *string `json:"type,omitempty"`
	DeviceAttributes *map[string]interface{} `json:"deviceAttributes,omitempty"`
	DeviceOnboarding *LegacySiteDeviceOnboard `json:"deviceOnboarding,omitempty"`
	Delete *bool `json:"delete,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LegacySiteDevice LegacySiteDevice

// NewLegacySiteDevice instantiates a new LegacySiteDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegacySiteDevice(name string) *LegacySiteDevice {
	this := LegacySiteDevice{}
	this.Name = name
	return &this
}

// NewLegacySiteDeviceWithDefaults instantiates a new LegacySiteDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegacySiteDeviceWithDefaults() *LegacySiteDevice {
	this := LegacySiteDevice{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *LegacySiteDevice) GetDeviceId() string {
	if o == nil || o.DeviceId == nil {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacySiteDevice) GetDeviceIdOk() (*string, bool) {
	if o == nil || o.DeviceId == nil {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *LegacySiteDevice) HasDeviceId() bool {
	if o != nil && o.DeviceId != nil {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *LegacySiteDevice) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetName returns the Name field value
func (o *LegacySiteDevice) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LegacySiteDevice) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LegacySiteDevice) SetName(v string) {
	o.Name = v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *LegacySiteDevice) GetModel() string {
	if o == nil || o.Model == nil {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacySiteDevice) GetModelOk() (*string, bool) {
	if o == nil || o.Model == nil {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *LegacySiteDevice) HasModel() bool {
	if o != nil && o.Model != nil {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *LegacySiteDevice) SetModel(v string) {
	o.Model = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LegacySiteDevice) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacySiteDevice) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LegacySiteDevice) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LegacySiteDevice) SetType(v string) {
	o.Type = &v
}

// GetDeviceAttributes returns the DeviceAttributes field value if set, zero value otherwise.
func (o *LegacySiteDevice) GetDeviceAttributes() map[string]interface{} {
	if o == nil || o.DeviceAttributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.DeviceAttributes
}

// GetDeviceAttributesOk returns a tuple with the DeviceAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacySiteDevice) GetDeviceAttributesOk() (*map[string]interface{}, bool) {
	if o == nil || o.DeviceAttributes == nil {
		return nil, false
	}
	return o.DeviceAttributes, true
}

// HasDeviceAttributes returns a boolean if a field has been set.
func (o *LegacySiteDevice) HasDeviceAttributes() bool {
	if o != nil && o.DeviceAttributes != nil {
		return true
	}

	return false
}

// SetDeviceAttributes gets a reference to the given map[string]interface{} and assigns it to the DeviceAttributes field.
func (o *LegacySiteDevice) SetDeviceAttributes(v map[string]interface{}) {
	o.DeviceAttributes = &v
}

// GetDeviceOnboarding returns the DeviceOnboarding field value if set, zero value otherwise.
func (o *LegacySiteDevice) GetDeviceOnboarding() LegacySiteDeviceOnboard {
	if o == nil || o.DeviceOnboarding == nil {
		var ret LegacySiteDeviceOnboard
		return ret
	}
	return *o.DeviceOnboarding
}

// GetDeviceOnboardingOk returns a tuple with the DeviceOnboarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacySiteDevice) GetDeviceOnboardingOk() (*LegacySiteDeviceOnboard, bool) {
	if o == nil || o.DeviceOnboarding == nil {
		return nil, false
	}
	return o.DeviceOnboarding, true
}

// HasDeviceOnboarding returns a boolean if a field has been set.
func (o *LegacySiteDevice) HasDeviceOnboarding() bool {
	if o != nil && o.DeviceOnboarding != nil {
		return true
	}

	return false
}

// SetDeviceOnboarding gets a reference to the given LegacySiteDeviceOnboard and assigns it to the DeviceOnboarding field.
func (o *LegacySiteDevice) SetDeviceOnboarding(v LegacySiteDeviceOnboard) {
	o.DeviceOnboarding = &v
}

// GetDelete returns the Delete field value if set, zero value otherwise.
func (o *LegacySiteDevice) GetDelete() bool {
	if o == nil || o.Delete == nil {
		var ret bool
		return ret
	}
	return *o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacySiteDevice) GetDeleteOk() (*bool, bool) {
	if o == nil || o.Delete == nil {
		return nil, false
	}
	return o.Delete, true
}

// HasDelete returns a boolean if a field has been set.
func (o *LegacySiteDevice) HasDelete() bool {
	if o != nil && o.Delete != nil {
		return true
	}

	return false
}

// SetDelete gets a reference to the given bool and assigns it to the Delete field.
func (o *LegacySiteDevice) SetDelete(v bool) {
	o.Delete = &v
}

func (o LegacySiteDevice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeviceId != nil {
		toSerialize["deviceId"] = o.DeviceId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Model != nil {
		toSerialize["model"] = o.Model
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.DeviceAttributes != nil {
		toSerialize["deviceAttributes"] = o.DeviceAttributes
	}
	if o.DeviceOnboarding != nil {
		toSerialize["deviceOnboarding"] = o.DeviceOnboarding
	}
	if o.Delete != nil {
		toSerialize["delete"] = o.Delete
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *LegacySiteDevice) UnmarshalJSON(bytes []byte) (err error) {
	varLegacySiteDevice := _LegacySiteDevice{}

	if err = json.Unmarshal(bytes, &varLegacySiteDevice); err == nil {
		*o = LegacySiteDevice(varLegacySiteDevice)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "deviceId")
		delete(additionalProperties, "name")
		delete(additionalProperties, "model")
		delete(additionalProperties, "type")
		delete(additionalProperties, "deviceAttributes")
		delete(additionalProperties, "deviceOnboarding")
		delete(additionalProperties, "delete")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLegacySiteDevice struct {
	value *LegacySiteDevice
	isSet bool
}

func (v NullableLegacySiteDevice) Get() *LegacySiteDevice {
	return v.value
}

func (v *NullableLegacySiteDevice) Set(val *LegacySiteDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacySiteDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacySiteDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacySiteDevice(val *LegacySiteDevice) *NullableLegacySiteDevice {
	return &NullableLegacySiteDevice{value: val, isSet: true}
}

func (v NullableLegacySiteDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacySiteDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


