/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// SmartUserAccounts struct for SmartUserAccounts
type SmartUserAccounts struct {
	Accounts *[]SmartAccountUser `json:"accounts,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SmartUserAccounts SmartUserAccounts

// NewSmartUserAccounts instantiates a new SmartUserAccounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartUserAccounts() *SmartUserAccounts {
	this := SmartUserAccounts{}
	return &this
}

// NewSmartUserAccountsWithDefaults instantiates a new SmartUserAccounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartUserAccountsWithDefaults() *SmartUserAccounts {
	this := SmartUserAccounts{}
	return &this
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *SmartUserAccounts) GetAccounts() []SmartAccountUser {
	if o == nil || o.Accounts == nil {
		var ret []SmartAccountUser
		return ret
	}
	return *o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartUserAccounts) GetAccountsOk() (*[]SmartAccountUser, bool) {
	if o == nil || o.Accounts == nil {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *SmartUserAccounts) HasAccounts() bool {
	if o != nil && o.Accounts != nil {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []SmartAccountUser and assigns it to the Accounts field.
func (o *SmartUserAccounts) SetAccounts(v []SmartAccountUser) {
	o.Accounts = &v
}

func (o SmartUserAccounts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Accounts != nil {
		toSerialize["accounts"] = o.Accounts
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SmartUserAccounts) UnmarshalJSON(bytes []byte) (err error) {
	varSmartUserAccounts := _SmartUserAccounts{}

	if err = json.Unmarshal(bytes, &varSmartUserAccounts); err == nil {
		*o = SmartUserAccounts(varSmartUserAccounts)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "accounts")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSmartUserAccounts struct {
	value *SmartUserAccounts
	isSet bool
}

func (v NullableSmartUserAccounts) Get() *SmartUserAccounts {
	return v.value
}

func (v *NullableSmartUserAccounts) Set(val *SmartUserAccounts) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartUserAccounts) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartUserAccounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartUserAccounts(val *SmartUserAccounts) *NullableSmartUserAccounts {
	return &NullableSmartUserAccounts{value: val, isSet: true}
}

func (v NullableSmartUserAccounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartUserAccounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


