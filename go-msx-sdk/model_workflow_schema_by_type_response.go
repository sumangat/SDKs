/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// WorkflowSchemaByTypeResponse struct for WorkflowSchemaByTypeResponse
type WorkflowSchemaByTypeResponse struct {
	ViewSchema NullableWorkflowSchema `json:"view_schema,omitempty"`
	DataSchema NullableWorkflowSchema `json:"data_schema,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkflowSchemaByTypeResponse WorkflowSchemaByTypeResponse

// NewWorkflowSchemaByTypeResponse instantiates a new WorkflowSchemaByTypeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowSchemaByTypeResponse() *WorkflowSchemaByTypeResponse {
	this := WorkflowSchemaByTypeResponse{}
	return &this
}

// NewWorkflowSchemaByTypeResponseWithDefaults instantiates a new WorkflowSchemaByTypeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowSchemaByTypeResponseWithDefaults() *WorkflowSchemaByTypeResponse {
	this := WorkflowSchemaByTypeResponse{}
	return &this
}

// GetViewSchema returns the ViewSchema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowSchemaByTypeResponse) GetViewSchema() WorkflowSchema {
	if o == nil || o.ViewSchema.Get() == nil {
		var ret WorkflowSchema
		return ret
	}
	return *o.ViewSchema.Get()
}

// GetViewSchemaOk returns a tuple with the ViewSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowSchemaByTypeResponse) GetViewSchemaOk() (*WorkflowSchema, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewSchema.Get(), o.ViewSchema.IsSet()
}

// HasViewSchema returns a boolean if a field has been set.
func (o *WorkflowSchemaByTypeResponse) HasViewSchema() bool {
	if o != nil && o.ViewSchema.IsSet() {
		return true
	}

	return false
}

// SetViewSchema gets a reference to the given NullableWorkflowSchema and assigns it to the ViewSchema field.
func (o *WorkflowSchemaByTypeResponse) SetViewSchema(v WorkflowSchema) {
	o.ViewSchema.Set(&v)
}
// SetViewSchemaNil sets the value for ViewSchema to be an explicit nil
func (o *WorkflowSchemaByTypeResponse) SetViewSchemaNil() {
	o.ViewSchema.Set(nil)
}

// UnsetViewSchema ensures that no value is present for ViewSchema, not even an explicit nil
func (o *WorkflowSchemaByTypeResponse) UnsetViewSchema() {
	o.ViewSchema.Unset()
}

// GetDataSchema returns the DataSchema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowSchemaByTypeResponse) GetDataSchema() WorkflowSchema {
	if o == nil || o.DataSchema.Get() == nil {
		var ret WorkflowSchema
		return ret
	}
	return *o.DataSchema.Get()
}

// GetDataSchemaOk returns a tuple with the DataSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowSchemaByTypeResponse) GetDataSchemaOk() (*WorkflowSchema, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataSchema.Get(), o.DataSchema.IsSet()
}

// HasDataSchema returns a boolean if a field has been set.
func (o *WorkflowSchemaByTypeResponse) HasDataSchema() bool {
	if o != nil && o.DataSchema.IsSet() {
		return true
	}

	return false
}

// SetDataSchema gets a reference to the given NullableWorkflowSchema and assigns it to the DataSchema field.
func (o *WorkflowSchemaByTypeResponse) SetDataSchema(v WorkflowSchema) {
	o.DataSchema.Set(&v)
}
// SetDataSchemaNil sets the value for DataSchema to be an explicit nil
func (o *WorkflowSchemaByTypeResponse) SetDataSchemaNil() {
	o.DataSchema.Set(nil)
}

// UnsetDataSchema ensures that no value is present for DataSchema, not even an explicit nil
func (o *WorkflowSchemaByTypeResponse) UnsetDataSchema() {
	o.DataSchema.Unset()
}

func (o WorkflowSchemaByTypeResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ViewSchema.IsSet() {
		toSerialize["view_schema"] = o.ViewSchema.Get()
	}
	if o.DataSchema.IsSet() {
		toSerialize["data_schema"] = o.DataSchema.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *WorkflowSchemaByTypeResponse) UnmarshalJSON(bytes []byte) (err error) {
	varWorkflowSchemaByTypeResponse := _WorkflowSchemaByTypeResponse{}

	if err = json.Unmarshal(bytes, &varWorkflowSchemaByTypeResponse); err == nil {
		*o = WorkflowSchemaByTypeResponse(varWorkflowSchemaByTypeResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "view_schema")
		delete(additionalProperties, "data_schema")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkflowSchemaByTypeResponse struct {
	value *WorkflowSchemaByTypeResponse
	isSet bool
}

func (v NullableWorkflowSchemaByTypeResponse) Get() *WorkflowSchemaByTypeResponse {
	return v.value
}

func (v *NullableWorkflowSchemaByTypeResponse) Set(val *WorkflowSchemaByTypeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowSchemaByTypeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowSchemaByTypeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowSchemaByTypeResponse(val *WorkflowSchemaByTypeResponse) *NullableWorkflowSchemaByTypeResponse {
	return &NullableWorkflowSchemaByTypeResponse{value: val, isSet: true}
}

func (v NullableWorkflowSchemaByTypeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowSchemaByTypeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


