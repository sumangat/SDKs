/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
	"fmt"
)

// VulnerabilitySeverity PSIRT vulnerability severity rating (https://nvd.nist.gov/vuln-metrics/cvss).
type VulnerabilitySeverity string

// List of VulnerabilitySeverity
const (
	VULNERABILITYSEVERITY_NONE VulnerabilitySeverity = "NONE"
	VULNERABILITYSEVERITY_LOW VulnerabilitySeverity = "LOW"
	VULNERABILITYSEVERITY_MEDIUM VulnerabilitySeverity = "MEDIUM"
	VULNERABILITYSEVERITY_HIGH VulnerabilitySeverity = "HIGH"
	VULNERABILITYSEVERITY_CRITICAL VulnerabilitySeverity = "CRITICAL"
)

func (v *VulnerabilitySeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VulnerabilitySeverity(value)
	for _, existing := range []VulnerabilitySeverity{ "NONE", "LOW", "MEDIUM", "HIGH", "CRITICAL",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VulnerabilitySeverity", value)
}

// Ptr returns reference to VulnerabilitySeverity value
func (v VulnerabilitySeverity) Ptr() *VulnerabilitySeverity {
	return &v
}

type NullableVulnerabilitySeverity struct {
	value *VulnerabilitySeverity
	isSet bool
}

func (v NullableVulnerabilitySeverity) Get() *VulnerabilitySeverity {
	return v.value
}

func (v *NullableVulnerabilitySeverity) Set(val *VulnerabilitySeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableVulnerabilitySeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableVulnerabilitySeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVulnerabilitySeverity(val *VulnerabilitySeverity) *NullableVulnerabilitySeverity {
	return &NullableVulnerabilitySeverity{value: val, isSet: true}
}

func (v NullableVulnerabilitySeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVulnerabilitySeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

