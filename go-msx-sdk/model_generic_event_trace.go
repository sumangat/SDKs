/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// GenericEventTrace struct for GenericEventTrace
type GenericEventTrace struct {
	TraceId *string `json:"traceId,omitempty"`
	SpanId *string `json:"spanId,omitempty"`
	ParentId *string `json:"parentId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GenericEventTrace GenericEventTrace

// NewGenericEventTrace instantiates a new GenericEventTrace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenericEventTrace() *GenericEventTrace {
	this := GenericEventTrace{}
	return &this
}

// NewGenericEventTraceWithDefaults instantiates a new GenericEventTrace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenericEventTraceWithDefaults() *GenericEventTrace {
	this := GenericEventTrace{}
	return &this
}

// GetTraceId returns the TraceId field value if set, zero value otherwise.
func (o *GenericEventTrace) GetTraceId() string {
	if o == nil || o.TraceId == nil {
		var ret string
		return ret
	}
	return *o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericEventTrace) GetTraceIdOk() (*string, bool) {
	if o == nil || o.TraceId == nil {
		return nil, false
	}
	return o.TraceId, true
}

// HasTraceId returns a boolean if a field has been set.
func (o *GenericEventTrace) HasTraceId() bool {
	if o != nil && o.TraceId != nil {
		return true
	}

	return false
}

// SetTraceId gets a reference to the given string and assigns it to the TraceId field.
func (o *GenericEventTrace) SetTraceId(v string) {
	o.TraceId = &v
}

// GetSpanId returns the SpanId field value if set, zero value otherwise.
func (o *GenericEventTrace) GetSpanId() string {
	if o == nil || o.SpanId == nil {
		var ret string
		return ret
	}
	return *o.SpanId
}

// GetSpanIdOk returns a tuple with the SpanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericEventTrace) GetSpanIdOk() (*string, bool) {
	if o == nil || o.SpanId == nil {
		return nil, false
	}
	return o.SpanId, true
}

// HasSpanId returns a boolean if a field has been set.
func (o *GenericEventTrace) HasSpanId() bool {
	if o != nil && o.SpanId != nil {
		return true
	}

	return false
}

// SetSpanId gets a reference to the given string and assigns it to the SpanId field.
func (o *GenericEventTrace) SetSpanId(v string) {
	o.SpanId = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *GenericEventTrace) GetParentId() string {
	if o == nil || o.ParentId == nil {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericEventTrace) GetParentIdOk() (*string, bool) {
	if o == nil || o.ParentId == nil {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *GenericEventTrace) HasParentId() bool {
	if o != nil && o.ParentId != nil {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *GenericEventTrace) SetParentId(v string) {
	o.ParentId = &v
}

func (o GenericEventTrace) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TraceId != nil {
		toSerialize["traceId"] = o.TraceId
	}
	if o.SpanId != nil {
		toSerialize["spanId"] = o.SpanId
	}
	if o.ParentId != nil {
		toSerialize["parentId"] = o.ParentId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *GenericEventTrace) UnmarshalJSON(bytes []byte) (err error) {
	varGenericEventTrace := _GenericEventTrace{}

	if err = json.Unmarshal(bytes, &varGenericEventTrace); err == nil {
		*o = GenericEventTrace(varGenericEventTrace)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "traceId")
		delete(additionalProperties, "spanId")
		delete(additionalProperties, "parentId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGenericEventTrace struct {
	value *GenericEventTrace
	isSet bool
}

func (v NullableGenericEventTrace) Get() *GenericEventTrace {
	return v.value
}

func (v *NullableGenericEventTrace) Set(val *GenericEventTrace) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericEventTrace) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericEventTrace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericEventTrace(val *GenericEventTrace) *NullableGenericEventTrace {
	return &NullableGenericEventTrace{value: val, isSet: true}
}

func (v NullableGenericEventTrace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericEventTrace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


