/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// CostSummary struct for CostSummary
type CostSummary struct {
	Type *string `json:"type,omitempty"`
	Subtype *string `json:"subtype,omitempty"`
	Cost NullableFloat64 `json:"cost,omitempty"`
	Price NullableFloat64 `json:"price,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CostSummary CostSummary

// NewCostSummary instantiates a new CostSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCostSummary() *CostSummary {
	this := CostSummary{}
	return &this
}

// NewCostSummaryWithDefaults instantiates a new CostSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCostSummaryWithDefaults() *CostSummary {
	this := CostSummary{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CostSummary) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostSummary) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CostSummary) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CostSummary) SetType(v string) {
	o.Type = &v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *CostSummary) GetSubtype() string {
	if o == nil || o.Subtype == nil {
		var ret string
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostSummary) GetSubtypeOk() (*string, bool) {
	if o == nil || o.Subtype == nil {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *CostSummary) HasSubtype() bool {
	if o != nil && o.Subtype != nil {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given string and assigns it to the Subtype field.
func (o *CostSummary) SetSubtype(v string) {
	o.Subtype = &v
}

// GetCost returns the Cost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CostSummary) GetCost() float64 {
	if o == nil || o.Cost.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Cost.Get()
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CostSummary) GetCostOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Cost.Get(), o.Cost.IsSet()
}

// HasCost returns a boolean if a field has been set.
func (o *CostSummary) HasCost() bool {
	if o != nil && o.Cost.IsSet() {
		return true
	}

	return false
}

// SetCost gets a reference to the given NullableFloat64 and assigns it to the Cost field.
func (o *CostSummary) SetCost(v float64) {
	o.Cost.Set(&v)
}
// SetCostNil sets the value for Cost to be an explicit nil
func (o *CostSummary) SetCostNil() {
	o.Cost.Set(nil)
}

// UnsetCost ensures that no value is present for Cost, not even an explicit nil
func (o *CostSummary) UnsetCost() {
	o.Cost.Unset()
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CostSummary) GetPrice() float64 {
	if o == nil || o.Price.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CostSummary) GetPriceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *CostSummary) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat64 and assigns it to the Price field.
func (o *CostSummary) SetPrice(v float64) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *CostSummary) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *CostSummary) UnsetPrice() {
	o.Price.Unset()
}

func (o CostSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Subtype != nil {
		toSerialize["subtype"] = o.Subtype
	}
	if o.Cost.IsSet() {
		toSerialize["cost"] = o.Cost.Get()
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CostSummary) UnmarshalJSON(bytes []byte) (err error) {
	varCostSummary := _CostSummary{}

	if err = json.Unmarshal(bytes, &varCostSummary); err == nil {
		*o = CostSummary(varCostSummary)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "subtype")
		delete(additionalProperties, "cost")
		delete(additionalProperties, "price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCostSummary struct {
	value *CostSummary
	isSet bool
}

func (v NullableCostSummary) Get() *CostSummary {
	return v.value
}

func (v *NullableCostSummary) Set(val *CostSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableCostSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableCostSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCostSummary(val *CostSummary) *NullableCostSummary {
	return &NullableCostSummary{value: val, isSet: true}
}

func (v NullableCostSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCostSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


