/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// TemplateApplicationCreate struct for TemplateApplicationCreate
type TemplateApplicationCreate struct {
	TenantId string `json:"tenantId"`
	TargetId string `json:"targetId"`
	TargetType string `json:"targetType"`
	Parameters *map[string]string `json:"parameters,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TemplateApplicationCreate TemplateApplicationCreate

// NewTemplateApplicationCreate instantiates a new TemplateApplicationCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateApplicationCreate(tenantId string, targetId string, targetType string) *TemplateApplicationCreate {
	this := TemplateApplicationCreate{}
	this.TenantId = tenantId
	this.TargetId = targetId
	this.TargetType = targetType
	return &this
}

// NewTemplateApplicationCreateWithDefaults instantiates a new TemplateApplicationCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateApplicationCreateWithDefaults() *TemplateApplicationCreate {
	this := TemplateApplicationCreate{}
	return &this
}

// GetTenantId returns the TenantId field value
func (o *TemplateApplicationCreate) GetTenantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *TemplateApplicationCreate) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *TemplateApplicationCreate) SetTenantId(v string) {
	o.TenantId = v
}

// GetTargetId returns the TargetId field value
func (o *TemplateApplicationCreate) GetTargetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value
// and a boolean to check if the value has been set.
func (o *TemplateApplicationCreate) GetTargetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TargetId, true
}

// SetTargetId sets field value
func (o *TemplateApplicationCreate) SetTargetId(v string) {
	o.TargetId = v
}

// GetTargetType returns the TargetType field value
func (o *TemplateApplicationCreate) GetTargetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetType
}

// GetTargetTypeOk returns a tuple with the TargetType field value
// and a boolean to check if the value has been set.
func (o *TemplateApplicationCreate) GetTargetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TargetType, true
}

// SetTargetType sets field value
func (o *TemplateApplicationCreate) SetTargetType(v string) {
	o.TargetType = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *TemplateApplicationCreate) GetParameters() map[string]string {
	if o == nil || o.Parameters == nil {
		var ret map[string]string
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateApplicationCreate) GetParametersOk() (*map[string]string, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *TemplateApplicationCreate) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]string and assigns it to the Parameters field.
func (o *TemplateApplicationCreate) SetParameters(v map[string]string) {
	o.Parameters = &v
}

func (o TemplateApplicationCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tenantId"] = o.TenantId
	}
	if true {
		toSerialize["targetId"] = o.TargetId
	}
	if true {
		toSerialize["targetType"] = o.TargetType
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TemplateApplicationCreate) UnmarshalJSON(bytes []byte) (err error) {
	varTemplateApplicationCreate := _TemplateApplicationCreate{}

	if err = json.Unmarshal(bytes, &varTemplateApplicationCreate); err == nil {
		*o = TemplateApplicationCreate(varTemplateApplicationCreate)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "targetId")
		delete(additionalProperties, "targetType")
		delete(additionalProperties, "parameters")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTemplateApplicationCreate struct {
	value *TemplateApplicationCreate
	isSet bool
}

func (v NullableTemplateApplicationCreate) Get() *TemplateApplicationCreate {
	return v.value
}

func (v *NullableTemplateApplicationCreate) Set(val *TemplateApplicationCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateApplicationCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateApplicationCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateApplicationCreate(val *TemplateApplicationCreate) *NullableTemplateApplicationCreate {
	return &NullableTemplateApplicationCreate{value: val, isSet: true}
}

func (v NullableTemplateApplicationCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateApplicationCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


