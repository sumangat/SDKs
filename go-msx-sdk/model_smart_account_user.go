/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// SmartAccountUser struct for SmartAccountUser
type SmartAccountUser struct {
	// Smart Account identifier
	AccountId *int32 `json:"accountId,omitempty"`
	// Smart Account Name
	AccountName *string `json:"accountName,omitempty"`
	// Smart Accont Domain
	AccountDomain *string `json:"accountDomain,omitempty"`
	AccountType *SmartAccountType `json:"accountType,omitempty"`
	Roles *[]SmartAccountUserRole `json:"roles,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SmartAccountUser SmartAccountUser

// NewSmartAccountUser instantiates a new SmartAccountUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartAccountUser() *SmartAccountUser {
	this := SmartAccountUser{}
	return &this
}

// NewSmartAccountUserWithDefaults instantiates a new SmartAccountUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartAccountUserWithDefaults() *SmartAccountUser {
	this := SmartAccountUser{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *SmartAccountUser) GetAccountId() int32 {
	if o == nil || o.AccountId == nil {
		var ret int32
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartAccountUser) GetAccountIdOk() (*int32, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *SmartAccountUser) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given int32 and assigns it to the AccountId field.
func (o *SmartAccountUser) SetAccountId(v int32) {
	o.AccountId = &v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *SmartAccountUser) GetAccountName() string {
	if o == nil || o.AccountName == nil {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartAccountUser) GetAccountNameOk() (*string, bool) {
	if o == nil || o.AccountName == nil {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *SmartAccountUser) HasAccountName() bool {
	if o != nil && o.AccountName != nil {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *SmartAccountUser) SetAccountName(v string) {
	o.AccountName = &v
}

// GetAccountDomain returns the AccountDomain field value if set, zero value otherwise.
func (o *SmartAccountUser) GetAccountDomain() string {
	if o == nil || o.AccountDomain == nil {
		var ret string
		return ret
	}
	return *o.AccountDomain
}

// GetAccountDomainOk returns a tuple with the AccountDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartAccountUser) GetAccountDomainOk() (*string, bool) {
	if o == nil || o.AccountDomain == nil {
		return nil, false
	}
	return o.AccountDomain, true
}

// HasAccountDomain returns a boolean if a field has been set.
func (o *SmartAccountUser) HasAccountDomain() bool {
	if o != nil && o.AccountDomain != nil {
		return true
	}

	return false
}

// SetAccountDomain gets a reference to the given string and assigns it to the AccountDomain field.
func (o *SmartAccountUser) SetAccountDomain(v string) {
	o.AccountDomain = &v
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *SmartAccountUser) GetAccountType() SmartAccountType {
	if o == nil || o.AccountType == nil {
		var ret SmartAccountType
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartAccountUser) GetAccountTypeOk() (*SmartAccountType, bool) {
	if o == nil || o.AccountType == nil {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *SmartAccountUser) HasAccountType() bool {
	if o != nil && o.AccountType != nil {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given SmartAccountType and assigns it to the AccountType field.
func (o *SmartAccountUser) SetAccountType(v SmartAccountType) {
	o.AccountType = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *SmartAccountUser) GetRoles() []SmartAccountUserRole {
	if o == nil || o.Roles == nil {
		var ret []SmartAccountUserRole
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartAccountUser) GetRolesOk() (*[]SmartAccountUserRole, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *SmartAccountUser) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []SmartAccountUserRole and assigns it to the Roles field.
func (o *SmartAccountUser) SetRoles(v []SmartAccountUserRole) {
	o.Roles = &v
}

func (o SmartAccountUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountId != nil {
		toSerialize["accountId"] = o.AccountId
	}
	if o.AccountName != nil {
		toSerialize["accountName"] = o.AccountName
	}
	if o.AccountDomain != nil {
		toSerialize["accountDomain"] = o.AccountDomain
	}
	if o.AccountType != nil {
		toSerialize["accountType"] = o.AccountType
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SmartAccountUser) UnmarshalJSON(bytes []byte) (err error) {
	varSmartAccountUser := _SmartAccountUser{}

	if err = json.Unmarshal(bytes, &varSmartAccountUser); err == nil {
		*o = SmartAccountUser(varSmartAccountUser)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "accountId")
		delete(additionalProperties, "accountName")
		delete(additionalProperties, "accountDomain")
		delete(additionalProperties, "accountType")
		delete(additionalProperties, "roles")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSmartAccountUser struct {
	value *SmartAccountUser
	isSet bool
}

func (v NullableSmartAccountUser) Get() *SmartAccountUser {
	return v.value
}

func (v *NullableSmartAccountUser) Set(val *SmartAccountUser) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartAccountUser) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartAccountUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartAccountUser(val *SmartAccountUser) *NullableSmartAccountUser {
	return &NullableSmartAccountUser{value: val, isSet: true}
}

func (v NullableSmartAccountUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartAccountUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


