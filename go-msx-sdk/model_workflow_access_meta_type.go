/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// WorkflowAccessMetaType struct for WorkflowAccessMetaType
type WorkflowAccessMetaType struct {
	Id *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Version *string `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkflowAccessMetaType WorkflowAccessMetaType

// NewWorkflowAccessMetaType instantiates a new WorkflowAccessMetaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowAccessMetaType() *WorkflowAccessMetaType {
	this := WorkflowAccessMetaType{}
	return &this
}

// NewWorkflowAccessMetaTypeWithDefaults instantiates a new WorkflowAccessMetaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowAccessMetaTypeWithDefaults() *WorkflowAccessMetaType {
	this := WorkflowAccessMetaType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WorkflowAccessMetaType) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAccessMetaType) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WorkflowAccessMetaType) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WorkflowAccessMetaType) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WorkflowAccessMetaType) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAccessMetaType) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WorkflowAccessMetaType) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *WorkflowAccessMetaType) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *WorkflowAccessMetaType) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAccessMetaType) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *WorkflowAccessMetaType) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *WorkflowAccessMetaType) SetVersion(v string) {
	o.Version = &v
}

func (o WorkflowAccessMetaType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *WorkflowAccessMetaType) UnmarshalJSON(bytes []byte) (err error) {
	varWorkflowAccessMetaType := _WorkflowAccessMetaType{}

	if err = json.Unmarshal(bytes, &varWorkflowAccessMetaType); err == nil {
		*o = WorkflowAccessMetaType(varWorkflowAccessMetaType)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkflowAccessMetaType struct {
	value *WorkflowAccessMetaType
	isSet bool
}

func (v NullableWorkflowAccessMetaType) Get() *WorkflowAccessMetaType {
	return v.value
}

func (v *NullableWorkflowAccessMetaType) Set(val *WorkflowAccessMetaType) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowAccessMetaType) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowAccessMetaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowAccessMetaType(val *WorkflowAccessMetaType) *NullableWorkflowAccessMetaType {
	return &NullableWorkflowAccessMetaType{value: val, isSet: true}
}

func (v NullableWorkflowAccessMetaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowAccessMetaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


