/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// LegacyAbsoluteConfig struct for LegacyAbsoluteConfig
type LegacyAbsoluteConfig struct {
	DateTime *string `json:"dateTime,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LegacyAbsoluteConfig LegacyAbsoluteConfig

// NewLegacyAbsoluteConfig instantiates a new LegacyAbsoluteConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegacyAbsoluteConfig() *LegacyAbsoluteConfig {
	this := LegacyAbsoluteConfig{}
	return &this
}

// NewLegacyAbsoluteConfigWithDefaults instantiates a new LegacyAbsoluteConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegacyAbsoluteConfigWithDefaults() *LegacyAbsoluteConfig {
	this := LegacyAbsoluteConfig{}
	return &this
}

// GetDateTime returns the DateTime field value if set, zero value otherwise.
func (o *LegacyAbsoluteConfig) GetDateTime() string {
	if o == nil || o.DateTime == nil {
		var ret string
		return ret
	}
	return *o.DateTime
}

// GetDateTimeOk returns a tuple with the DateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyAbsoluteConfig) GetDateTimeOk() (*string, bool) {
	if o == nil || o.DateTime == nil {
		return nil, false
	}
	return o.DateTime, true
}

// HasDateTime returns a boolean if a field has been set.
func (o *LegacyAbsoluteConfig) HasDateTime() bool {
	if o != nil && o.DateTime != nil {
		return true
	}

	return false
}

// SetDateTime gets a reference to the given string and assigns it to the DateTime field.
func (o *LegacyAbsoluteConfig) SetDateTime(v string) {
	o.DateTime = &v
}

func (o LegacyAbsoluteConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DateTime != nil {
		toSerialize["dateTime"] = o.DateTime
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *LegacyAbsoluteConfig) UnmarshalJSON(bytes []byte) (err error) {
	varLegacyAbsoluteConfig := _LegacyAbsoluteConfig{}

	if err = json.Unmarshal(bytes, &varLegacyAbsoluteConfig); err == nil {
		*o = LegacyAbsoluteConfig(varLegacyAbsoluteConfig)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "dateTime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLegacyAbsoluteConfig struct {
	value *LegacyAbsoluteConfig
	isSet bool
}

func (v NullableLegacyAbsoluteConfig) Get() *LegacyAbsoluteConfig {
	return v.value
}

func (v *NullableLegacyAbsoluteConfig) Set(val *LegacyAbsoluteConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacyAbsoluteConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacyAbsoluteConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacyAbsoluteConfig(val *LegacyAbsoluteConfig) *NullableLegacyAbsoluteConfig {
	return &NullableLegacyAbsoluteConfig{value: val, isSet: true}
}

func (v NullableLegacyAbsoluteConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacyAbsoluteConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


