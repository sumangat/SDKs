/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// SecurityApiService SecurityApi service
type SecurityApiService service

type ApiGetAccessTokenRequest struct {
	ctx _context.Context
	ApiService *SecurityApiService
	authorization *string
	grantType *string
	username *string
	password *string
	accessToken *string
	switchUsername *string
	tenantId *string
	scope *string
	nonce *string
	tenantName *string
}

func (r ApiGetAccessTokenRequest) Authorization(authorization string) ApiGetAccessTokenRequest {
	r.authorization = &authorization
	return r
}
func (r ApiGetAccessTokenRequest) GrantType(grantType string) ApiGetAccessTokenRequest {
	r.grantType = &grantType
	return r
}
func (r ApiGetAccessTokenRequest) Username(username string) ApiGetAccessTokenRequest {
	r.username = &username
	return r
}
func (r ApiGetAccessTokenRequest) Password(password string) ApiGetAccessTokenRequest {
	r.password = &password
	return r
}
func (r ApiGetAccessTokenRequest) AccessToken(accessToken string) ApiGetAccessTokenRequest {
	r.accessToken = &accessToken
	return r
}
func (r ApiGetAccessTokenRequest) SwitchUsername(switchUsername string) ApiGetAccessTokenRequest {
	r.switchUsername = &switchUsername
	return r
}
func (r ApiGetAccessTokenRequest) TenantId(tenantId string) ApiGetAccessTokenRequest {
	r.tenantId = &tenantId
	return r
}
func (r ApiGetAccessTokenRequest) Scope(scope string) ApiGetAccessTokenRequest {
	r.scope = &scope
	return r
}
func (r ApiGetAccessTokenRequest) Nonce(nonce string) ApiGetAccessTokenRequest {
	r.nonce = &nonce
	return r
}
func (r ApiGetAccessTokenRequest) TenantName(tenantName string) ApiGetAccessTokenRequest {
	r.tenantName = &tenantName
	return r
}

func (r ApiGetAccessTokenRequest) Execute() (AccessToken, *_nethttp.Response, error) {
	return r.ApiService.GetAccessTokenExecute(r)
}

/*
 * GetAccessToken Returns an access token.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetAccessTokenRequest
 */
func (a *SecurityApiService) GetAccessToken(ctx _context.Context) ApiGetAccessTokenRequest {
	return ApiGetAccessTokenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return AccessToken
 */
func (a *SecurityApiService) GetAccessTokenExecute(r ApiGetAccessTokenRequest) (AccessToken, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AccessToken
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityApiService.GetAccessToken")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/idm/v2/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.grantType == nil {
		return localVarReturnValue, nil, reportError("grantType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	localVarFormParams.Add("grant_type", parameterToString(*r.grantType, ""))
	if r.username != nil {
		localVarFormParams.Add("username", parameterToString(*r.username, ""))
	}
	if r.password != nil {
		localVarFormParams.Add("password", parameterToString(*r.password, ""))
	}
	if r.accessToken != nil {
		localVarFormParams.Add("access_token", parameterToString(*r.accessToken, ""))
	}
	if r.switchUsername != nil {
		localVarFormParams.Add("switch_username", parameterToString(*r.switchUsername, ""))
	}
	if r.tenantId != nil {
		localVarFormParams.Add("tenant_id", parameterToString(*r.tenantId, ""))
	}
	if r.scope != nil {
		localVarFormParams.Add("scope", parameterToString(*r.scope, ""))
	}
	if r.nonce != nil {
		localVarFormParams.Add("nonce", parameterToString(*r.nonce, ""))
	}
	if r.tenantName != nil {
		localVarFormParams.Add("tenant_name", parameterToString(*r.tenantName, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
