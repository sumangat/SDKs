/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// WorkflowMetadata struct for WorkflowMetadata
type WorkflowMetadata struct {
	GitInfo *WorkflowMetadataGitInfo `json:"git_info,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkflowMetadata WorkflowMetadata

// NewWorkflowMetadata instantiates a new WorkflowMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowMetadata() *WorkflowMetadata {
	this := WorkflowMetadata{}
	return &this
}

// NewWorkflowMetadataWithDefaults instantiates a new WorkflowMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowMetadataWithDefaults() *WorkflowMetadata {
	this := WorkflowMetadata{}
	return &this
}

// GetGitInfo returns the GitInfo field value if set, zero value otherwise.
func (o *WorkflowMetadata) GetGitInfo() WorkflowMetadataGitInfo {
	if o == nil || o.GitInfo == nil {
		var ret WorkflowMetadataGitInfo
		return ret
	}
	return *o.GitInfo
}

// GetGitInfoOk returns a tuple with the GitInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowMetadata) GetGitInfoOk() (*WorkflowMetadataGitInfo, bool) {
	if o == nil || o.GitInfo == nil {
		return nil, false
	}
	return o.GitInfo, true
}

// HasGitInfo returns a boolean if a field has been set.
func (o *WorkflowMetadata) HasGitInfo() bool {
	if o != nil && o.GitInfo != nil {
		return true
	}

	return false
}

// SetGitInfo gets a reference to the given WorkflowMetadataGitInfo and assigns it to the GitInfo field.
func (o *WorkflowMetadata) SetGitInfo(v WorkflowMetadataGitInfo) {
	o.GitInfo = &v
}

func (o WorkflowMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GitInfo != nil {
		toSerialize["git_info"] = o.GitInfo
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *WorkflowMetadata) UnmarshalJSON(bytes []byte) (err error) {
	varWorkflowMetadata := _WorkflowMetadata{}

	if err = json.Unmarshal(bytes, &varWorkflowMetadata); err == nil {
		*o = WorkflowMetadata(varWorkflowMetadata)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "git_info")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkflowMetadata struct {
	value *WorkflowMetadata
	isSet bool
}

func (v NullableWorkflowMetadata) Get() *WorkflowMetadata {
	return v.value
}

func (v *NullableWorkflowMetadata) Set(val *WorkflowMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowMetadata(val *WorkflowMetadata) *NullableWorkflowMetadata {
	return &NullableWorkflowMetadata{value: val, isSet: true}
}

func (v NullableWorkflowMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


