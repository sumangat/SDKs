/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// TemplateApplicationAllOf struct for TemplateApplicationAllOf
type TemplateApplicationAllOf struct {
	Id *string `json:"id,omitempty"`
	TemplateId *string `json:"templateId,omitempty"`
	TemplateName *string `json:"templateName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TemplateApplicationAllOf TemplateApplicationAllOf

// NewTemplateApplicationAllOf instantiates a new TemplateApplicationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateApplicationAllOf() *TemplateApplicationAllOf {
	this := TemplateApplicationAllOf{}
	return &this
}

// NewTemplateApplicationAllOfWithDefaults instantiates a new TemplateApplicationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateApplicationAllOfWithDefaults() *TemplateApplicationAllOf {
	this := TemplateApplicationAllOf{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TemplateApplicationAllOf) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateApplicationAllOf) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TemplateApplicationAllOf) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TemplateApplicationAllOf) SetId(v string) {
	o.Id = &v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise.
func (o *TemplateApplicationAllOf) GetTemplateId() string {
	if o == nil || o.TemplateId == nil {
		var ret string
		return ret
	}
	return *o.TemplateId
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateApplicationAllOf) GetTemplateIdOk() (*string, bool) {
	if o == nil || o.TemplateId == nil {
		return nil, false
	}
	return o.TemplateId, true
}

// HasTemplateId returns a boolean if a field has been set.
func (o *TemplateApplicationAllOf) HasTemplateId() bool {
	if o != nil && o.TemplateId != nil {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given string and assigns it to the TemplateId field.
func (o *TemplateApplicationAllOf) SetTemplateId(v string) {
	o.TemplateId = &v
}

// GetTemplateName returns the TemplateName field value if set, zero value otherwise.
func (o *TemplateApplicationAllOf) GetTemplateName() string {
	if o == nil || o.TemplateName == nil {
		var ret string
		return ret
	}
	return *o.TemplateName
}

// GetTemplateNameOk returns a tuple with the TemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateApplicationAllOf) GetTemplateNameOk() (*string, bool) {
	if o == nil || o.TemplateName == nil {
		return nil, false
	}
	return o.TemplateName, true
}

// HasTemplateName returns a boolean if a field has been set.
func (o *TemplateApplicationAllOf) HasTemplateName() bool {
	if o != nil && o.TemplateName != nil {
		return true
	}

	return false
}

// SetTemplateName gets a reference to the given string and assigns it to the TemplateName field.
func (o *TemplateApplicationAllOf) SetTemplateName(v string) {
	o.TemplateName = &v
}

func (o TemplateApplicationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.TemplateId != nil {
		toSerialize["templateId"] = o.TemplateId
	}
	if o.TemplateName != nil {
		toSerialize["templateName"] = o.TemplateName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TemplateApplicationAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varTemplateApplicationAllOf := _TemplateApplicationAllOf{}

	if err = json.Unmarshal(bytes, &varTemplateApplicationAllOf); err == nil {
		*o = TemplateApplicationAllOf(varTemplateApplicationAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "templateId")
		delete(additionalProperties, "templateName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTemplateApplicationAllOf struct {
	value *TemplateApplicationAllOf
	isSet bool
}

func (v NullableTemplateApplicationAllOf) Get() *TemplateApplicationAllOf {
	return v.value
}

func (v *NullableTemplateApplicationAllOf) Set(val *TemplateApplicationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateApplicationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateApplicationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateApplicationAllOf(val *TemplateApplicationAllOf) *NullableTemplateApplicationAllOf {
	return &NullableTemplateApplicationAllOf{value: val, isSet: true}
}

func (v NullableTemplateApplicationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateApplicationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


