/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// DeviceUpdateAllOf struct for DeviceUpdateAllOf
type DeviceUpdateAllOf struct {
	ServiceType NullableString `json:"serviceType,omitempty"`
	Tags map[string]string `json:"tags,omitempty"`
	Managed bool `json:"managed"`
	OnboardType string `json:"onboardType"`
	OnboardInformation map[string]interface{} `json:"onboardInformation,omitempty"`
	Attributes map[string]interface{} `json:"attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceUpdateAllOf DeviceUpdateAllOf

// NewDeviceUpdateAllOf instantiates a new DeviceUpdateAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceUpdateAllOf(managed bool, onboardType string) *DeviceUpdateAllOf {
	this := DeviceUpdateAllOf{}
	this.Managed = managed
	this.OnboardType = onboardType
	return &this
}

// NewDeviceUpdateAllOfWithDefaults instantiates a new DeviceUpdateAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceUpdateAllOfWithDefaults() *DeviceUpdateAllOf {
	this := DeviceUpdateAllOf{}
	var managed bool = false
	this.Managed = managed
	return &this
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceUpdateAllOf) GetServiceType() string {
	if o == nil || o.ServiceType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServiceType.Get()
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceUpdateAllOf) GetServiceTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServiceType.Get(), o.ServiceType.IsSet()
}

// HasServiceType returns a boolean if a field has been set.
func (o *DeviceUpdateAllOf) HasServiceType() bool {
	if o != nil && o.ServiceType.IsSet() {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given NullableString and assigns it to the ServiceType field.
func (o *DeviceUpdateAllOf) SetServiceType(v string) {
	o.ServiceType.Set(&v)
}
// SetServiceTypeNil sets the value for ServiceType to be an explicit nil
func (o *DeviceUpdateAllOf) SetServiceTypeNil() {
	o.ServiceType.Set(nil)
}

// UnsetServiceType ensures that no value is present for ServiceType, not even an explicit nil
func (o *DeviceUpdateAllOf) UnsetServiceType() {
	o.ServiceType.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceUpdateAllOf) GetTags() map[string]string {
	if o == nil  {
		var ret map[string]string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceUpdateAllOf) GetTagsOk() (*map[string]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return &o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DeviceUpdateAllOf) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *DeviceUpdateAllOf) SetTags(v map[string]string) {
	o.Tags = v
}

// GetManaged returns the Managed field value
func (o *DeviceUpdateAllOf) GetManaged() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Managed
}

// GetManagedOk returns a tuple with the Managed field value
// and a boolean to check if the value has been set.
func (o *DeviceUpdateAllOf) GetManagedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Managed, true
}

// SetManaged sets field value
func (o *DeviceUpdateAllOf) SetManaged(v bool) {
	o.Managed = v
}

// GetOnboardType returns the OnboardType field value
func (o *DeviceUpdateAllOf) GetOnboardType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OnboardType
}

// GetOnboardTypeOk returns a tuple with the OnboardType field value
// and a boolean to check if the value has been set.
func (o *DeviceUpdateAllOf) GetOnboardTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OnboardType, true
}

// SetOnboardType sets field value
func (o *DeviceUpdateAllOf) SetOnboardType(v string) {
	o.OnboardType = v
}

// GetOnboardInformation returns the OnboardInformation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceUpdateAllOf) GetOnboardInformation() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.OnboardInformation
}

// GetOnboardInformationOk returns a tuple with the OnboardInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceUpdateAllOf) GetOnboardInformationOk() (*map[string]interface{}, bool) {
	if o == nil || o.OnboardInformation == nil {
		return nil, false
	}
	return &o.OnboardInformation, true
}

// HasOnboardInformation returns a boolean if a field has been set.
func (o *DeviceUpdateAllOf) HasOnboardInformation() bool {
	if o != nil && o.OnboardInformation != nil {
		return true
	}

	return false
}

// SetOnboardInformation gets a reference to the given map[string]interface{} and assigns it to the OnboardInformation field.
func (o *DeviceUpdateAllOf) SetOnboardInformation(v map[string]interface{}) {
	o.OnboardInformation = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceUpdateAllOf) GetAttributes() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceUpdateAllOf) GetAttributesOk() (*map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *DeviceUpdateAllOf) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *DeviceUpdateAllOf) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

func (o DeviceUpdateAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ServiceType.IsSet() {
		toSerialize["serviceType"] = o.ServiceType.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if true {
		toSerialize["managed"] = o.Managed
	}
	if true {
		toSerialize["onboardType"] = o.OnboardType
	}
	if o.OnboardInformation != nil {
		toSerialize["onboardInformation"] = o.OnboardInformation
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DeviceUpdateAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varDeviceUpdateAllOf := _DeviceUpdateAllOf{}

	if err = json.Unmarshal(bytes, &varDeviceUpdateAllOf); err == nil {
		*o = DeviceUpdateAllOf(varDeviceUpdateAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "serviceType")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "managed")
		delete(additionalProperties, "onboardType")
		delete(additionalProperties, "onboardInformation")
		delete(additionalProperties, "attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceUpdateAllOf struct {
	value *DeviceUpdateAllOf
	isSet bool
}

func (v NullableDeviceUpdateAllOf) Get() *DeviceUpdateAllOf {
	return v.value
}

func (v *NullableDeviceUpdateAllOf) Set(val *DeviceUpdateAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceUpdateAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceUpdateAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceUpdateAllOf(val *DeviceUpdateAllOf) *NullableDeviceUpdateAllOf {
	return &NullableDeviceUpdateAllOf{value: val, isSet: true}
}

func (v NullableDeviceUpdateAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceUpdateAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


