/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// DeviceTemplateVersionCreate struct for DeviceTemplateVersionCreate
type DeviceTemplateVersionCreate struct {
	Name string `json:"name"`
	ConfigContent string `json:"configContent"`
	TemplateParameterValidators *[]TemplateParameterValidator `json:"templateParameterValidators,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceTemplateVersionCreate DeviceTemplateVersionCreate

// NewDeviceTemplateVersionCreate instantiates a new DeviceTemplateVersionCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceTemplateVersionCreate(name string, configContent string) *DeviceTemplateVersionCreate {
	this := DeviceTemplateVersionCreate{}
	this.Name = name
	this.ConfigContent = configContent
	return &this
}

// NewDeviceTemplateVersionCreateWithDefaults instantiates a new DeviceTemplateVersionCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceTemplateVersionCreateWithDefaults() *DeviceTemplateVersionCreate {
	this := DeviceTemplateVersionCreate{}
	return &this
}

// GetName returns the Name field value
func (o *DeviceTemplateVersionCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DeviceTemplateVersionCreate) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DeviceTemplateVersionCreate) SetName(v string) {
	o.Name = v
}

// GetConfigContent returns the ConfigContent field value
func (o *DeviceTemplateVersionCreate) GetConfigContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfigContent
}

// GetConfigContentOk returns a tuple with the ConfigContent field value
// and a boolean to check if the value has been set.
func (o *DeviceTemplateVersionCreate) GetConfigContentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConfigContent, true
}

// SetConfigContent sets field value
func (o *DeviceTemplateVersionCreate) SetConfigContent(v string) {
	o.ConfigContent = v
}

// GetTemplateParameterValidators returns the TemplateParameterValidators field value if set, zero value otherwise.
func (o *DeviceTemplateVersionCreate) GetTemplateParameterValidators() []TemplateParameterValidator {
	if o == nil || o.TemplateParameterValidators == nil {
		var ret []TemplateParameterValidator
		return ret
	}
	return *o.TemplateParameterValidators
}

// GetTemplateParameterValidatorsOk returns a tuple with the TemplateParameterValidators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceTemplateVersionCreate) GetTemplateParameterValidatorsOk() (*[]TemplateParameterValidator, bool) {
	if o == nil || o.TemplateParameterValidators == nil {
		return nil, false
	}
	return o.TemplateParameterValidators, true
}

// HasTemplateParameterValidators returns a boolean if a field has been set.
func (o *DeviceTemplateVersionCreate) HasTemplateParameterValidators() bool {
	if o != nil && o.TemplateParameterValidators != nil {
		return true
	}

	return false
}

// SetTemplateParameterValidators gets a reference to the given []TemplateParameterValidator and assigns it to the TemplateParameterValidators field.
func (o *DeviceTemplateVersionCreate) SetTemplateParameterValidators(v []TemplateParameterValidator) {
	o.TemplateParameterValidators = &v
}

func (o DeviceTemplateVersionCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["configContent"] = o.ConfigContent
	}
	if o.TemplateParameterValidators != nil {
		toSerialize["templateParameterValidators"] = o.TemplateParameterValidators
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DeviceTemplateVersionCreate) UnmarshalJSON(bytes []byte) (err error) {
	varDeviceTemplateVersionCreate := _DeviceTemplateVersionCreate{}

	if err = json.Unmarshal(bytes, &varDeviceTemplateVersionCreate); err == nil {
		*o = DeviceTemplateVersionCreate(varDeviceTemplateVersionCreate)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "configContent")
		delete(additionalProperties, "templateParameterValidators")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceTemplateVersionCreate struct {
	value *DeviceTemplateVersionCreate
	isSet bool
}

func (v NullableDeviceTemplateVersionCreate) Get() *DeviceTemplateVersionCreate {
	return v.value
}

func (v *NullableDeviceTemplateVersionCreate) Set(val *DeviceTemplateVersionCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceTemplateVersionCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceTemplateVersionCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceTemplateVersionCreate(val *DeviceTemplateVersionCreate) *NullableDeviceTemplateVersionCreate {
	return &NullableDeviceTemplateVersionCreate{value: val, isSet: true}
}

func (v NullableDeviceTemplateVersionCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceTemplateVersionCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


