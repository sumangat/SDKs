/*
 * MSX SDK
 *
 * MSX SDK client.
 *
 * API version: 1.0.9
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msxsdk

import (
	"encoding/json"
)

// LegacySite struct for LegacySite
type LegacySite struct {
	SiteId string `json:"siteId"`
	SiteName string `json:"siteName"`
	DisplayName *string `json:"displayName,omitempty"`
	Address LegacyAddress `json:"address"`
	Devices *[]LegacySiteDevice `json:"devices,omitempty"`
	SiteAttributes *map[string]interface{} `json:"siteAttributes,omitempty"`
	Delete *bool `json:"delete,omitempty"`
	OperationalStatus *string `json:"operationalStatus,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LegacySite LegacySite

// NewLegacySite instantiates a new LegacySite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegacySite(siteId string, siteName string, address LegacyAddress) *LegacySite {
	this := LegacySite{}
	this.SiteId = siteId
	this.SiteName = siteName
	this.Address = address
	return &this
}

// NewLegacySiteWithDefaults instantiates a new LegacySite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegacySiteWithDefaults() *LegacySite {
	this := LegacySite{}
	return &this
}

// GetSiteId returns the SiteId field value
func (o *LegacySite) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *LegacySite) GetSiteIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *LegacySite) SetSiteId(v string) {
	o.SiteId = v
}

// GetSiteName returns the SiteName field value
func (o *LegacySite) GetSiteName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value
// and a boolean to check if the value has been set.
func (o *LegacySite) GetSiteNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SiteName, true
}

// SetSiteName sets field value
func (o *LegacySite) SetSiteName(v string) {
	o.SiteName = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *LegacySite) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacySite) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *LegacySite) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *LegacySite) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetAddress returns the Address field value
func (o *LegacySite) GetAddress() LegacyAddress {
	if o == nil {
		var ret LegacyAddress
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *LegacySite) GetAddressOk() (*LegacyAddress, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *LegacySite) SetAddress(v LegacyAddress) {
	o.Address = v
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *LegacySite) GetDevices() []LegacySiteDevice {
	if o == nil || o.Devices == nil {
		var ret []LegacySiteDevice
		return ret
	}
	return *o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacySite) GetDevicesOk() (*[]LegacySiteDevice, bool) {
	if o == nil || o.Devices == nil {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *LegacySite) HasDevices() bool {
	if o != nil && o.Devices != nil {
		return true
	}

	return false
}

// SetDevices gets a reference to the given []LegacySiteDevice and assigns it to the Devices field.
func (o *LegacySite) SetDevices(v []LegacySiteDevice) {
	o.Devices = &v
}

// GetSiteAttributes returns the SiteAttributes field value if set, zero value otherwise.
func (o *LegacySite) GetSiteAttributes() map[string]interface{} {
	if o == nil || o.SiteAttributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SiteAttributes
}

// GetSiteAttributesOk returns a tuple with the SiteAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacySite) GetSiteAttributesOk() (*map[string]interface{}, bool) {
	if o == nil || o.SiteAttributes == nil {
		return nil, false
	}
	return o.SiteAttributes, true
}

// HasSiteAttributes returns a boolean if a field has been set.
func (o *LegacySite) HasSiteAttributes() bool {
	if o != nil && o.SiteAttributes != nil {
		return true
	}

	return false
}

// SetSiteAttributes gets a reference to the given map[string]interface{} and assigns it to the SiteAttributes field.
func (o *LegacySite) SetSiteAttributes(v map[string]interface{}) {
	o.SiteAttributes = &v
}

// GetDelete returns the Delete field value if set, zero value otherwise.
func (o *LegacySite) GetDelete() bool {
	if o == nil || o.Delete == nil {
		var ret bool
		return ret
	}
	return *o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacySite) GetDeleteOk() (*bool, bool) {
	if o == nil || o.Delete == nil {
		return nil, false
	}
	return o.Delete, true
}

// HasDelete returns a boolean if a field has been set.
func (o *LegacySite) HasDelete() bool {
	if o != nil && o.Delete != nil {
		return true
	}

	return false
}

// SetDelete gets a reference to the given bool and assigns it to the Delete field.
func (o *LegacySite) SetDelete(v bool) {
	o.Delete = &v
}

// GetOperationalStatus returns the OperationalStatus field value if set, zero value otherwise.
func (o *LegacySite) GetOperationalStatus() string {
	if o == nil || o.OperationalStatus == nil {
		var ret string
		return ret
	}
	return *o.OperationalStatus
}

// GetOperationalStatusOk returns a tuple with the OperationalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacySite) GetOperationalStatusOk() (*string, bool) {
	if o == nil || o.OperationalStatus == nil {
		return nil, false
	}
	return o.OperationalStatus, true
}

// HasOperationalStatus returns a boolean if a field has been set.
func (o *LegacySite) HasOperationalStatus() bool {
	if o != nil && o.OperationalStatus != nil {
		return true
	}

	return false
}

// SetOperationalStatus gets a reference to the given string and assigns it to the OperationalStatus field.
func (o *LegacySite) SetOperationalStatus(v string) {
	o.OperationalStatus = &v
}

func (o LegacySite) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["siteId"] = o.SiteId
	}
	if true {
		toSerialize["siteName"] = o.SiteName
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if true {
		toSerialize["address"] = o.Address
	}
	if o.Devices != nil {
		toSerialize["devices"] = o.Devices
	}
	if o.SiteAttributes != nil {
		toSerialize["siteAttributes"] = o.SiteAttributes
	}
	if o.Delete != nil {
		toSerialize["delete"] = o.Delete
	}
	if o.OperationalStatus != nil {
		toSerialize["operationalStatus"] = o.OperationalStatus
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *LegacySite) UnmarshalJSON(bytes []byte) (err error) {
	varLegacySite := _LegacySite{}

	if err = json.Unmarshal(bytes, &varLegacySite); err == nil {
		*o = LegacySite(varLegacySite)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "siteName")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "address")
		delete(additionalProperties, "devices")
		delete(additionalProperties, "siteAttributes")
		delete(additionalProperties, "delete")
		delete(additionalProperties, "operationalStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLegacySite struct {
	value *LegacySite
	isSet bool
}

func (v NullableLegacySite) Get() *LegacySite {
	return v.value
}

func (v *NullableLegacySite) Set(val *LegacySite) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacySite) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacySite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacySite(val *LegacySite) *NullableLegacySite {
	return &NullableLegacySite{value: val, isSet: true}
}

func (v NullableLegacySite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacySite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


